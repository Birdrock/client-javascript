/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1LabelSelector', 'model/V1beta1NetworkPolicyIngressRule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V1LabelSelector'), require('./V1beta1NetworkPolicyIngressRule'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.V1beta1NetworkPolicySpec = factory(root.Kubernetes.ApiClient, root.Kubernetes.V1LabelSelector, root.Kubernetes.V1beta1NetworkPolicyIngressRule);
  }
}(this, function(ApiClient, V1LabelSelector, V1beta1NetworkPolicyIngressRule) {
  'use strict';




  /**
   * The V1beta1NetworkPolicySpec model module.
   * @module model/V1beta1NetworkPolicySpec
   * @version v1.6.0
   */

  /**
   * Constructs a new <code>V1beta1NetworkPolicySpec</code>.
   * @alias module:model/V1beta1NetworkPolicySpec
   * @class
   * @param podSelector {module:model/V1LabelSelector} Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
   */
  var exports = function(podSelector) {
    var _this = this;


    _this['podSelector'] = podSelector;
  };

  /**
   * Constructs a <code>V1beta1NetworkPolicySpec</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V1beta1NetworkPolicySpec} obj Optional instance to populate.
   * @return {module:model/V1beta1NetworkPolicySpec} The populated <code>V1beta1NetworkPolicySpec</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('ingress')) {
        obj['ingress'] = ApiClient.convertToType(data['ingress'], [V1beta1NetworkPolicyIngressRule]);
      }
      if (data.hasOwnProperty('podSelector')) {
        obj['podSelector'] = V1LabelSelector.constructFromObject(data['podSelector']);
      }
    }
    return obj;
  }

  /**
   * List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if namespace.networkPolicy.ingress.isolation is undefined and cluster policy allows it, OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not affect ingress isolation. If this field is present and contains at least one rule, this policy allows any traffic which matches at least one of the ingress rules in this list.
   * @member {Array.<module:model/V1beta1NetworkPolicyIngressRule>} ingress
   */
  exports.prototype['ingress'] = undefined;
  /**
   * Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
   * @member {module:model/V1LabelSelector} podSelector
   */
  exports.prototype['podSelector'] = undefined;



  return exports;
}));


