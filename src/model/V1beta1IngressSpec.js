/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1beta1IngressBackend', 'model/V1beta1IngressRule', 'model/V1beta1IngressTLS'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V1beta1IngressBackend'), require('./V1beta1IngressRule'), require('./V1beta1IngressTLS'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.V1beta1IngressSpec = factory(root.Kubernetes.ApiClient, root.Kubernetes.V1beta1IngressBackend, root.Kubernetes.V1beta1IngressRule, root.Kubernetes.V1beta1IngressTLS);
  }
}(this, function(ApiClient, V1beta1IngressBackend, V1beta1IngressRule, V1beta1IngressTLS) {
  'use strict';




  /**
   * The V1beta1IngressSpec model module.
   * @module model/V1beta1IngressSpec
   * @version v1.6.0
   */

  /**
   * Constructs a new <code>V1beta1IngressSpec</code>.
   * IngressSpec describes the Ingress the user wishes to exist.
   * @alias module:model/V1beta1IngressSpec
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>V1beta1IngressSpec</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V1beta1IngressSpec} obj Optional instance to populate.
   * @return {module:model/V1beta1IngressSpec} The populated <code>V1beta1IngressSpec</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('backend')) {
        obj['backend'] = V1beta1IngressBackend.constructFromObject(data['backend']);
      }
      if (data.hasOwnProperty('rules')) {
        obj['rules'] = ApiClient.convertToType(data['rules'], [V1beta1IngressRule]);
      }
      if (data.hasOwnProperty('tls')) {
        obj['tls'] = ApiClient.convertToType(data['tls'], [V1beta1IngressTLS]);
      }
    }
    return obj;
  }

  /**
   * A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
   * @member {module:model/V1beta1IngressBackend} backend
   */
  exports.prototype['backend'] = undefined;
  /**
   * A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
   * @member {Array.<module:model/V1beta1IngressRule>} rules
   */
  exports.prototype['rules'] = undefined;
  /**
   * TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
   * @member {Array.<module:model/V1beta1IngressTLS>} tls
   */
  exports.prototype['tls'] = undefined;



  return exports;
}));


