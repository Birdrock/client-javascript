/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1LabelSelector'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V1LabelSelector'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.V1PodAffinityTerm = factory(root.Kubernetes.ApiClient, root.Kubernetes.V1LabelSelector);
  }
}(this, function(ApiClient, V1LabelSelector) {
  'use strict';




  /**
   * The V1PodAffinityTerm model module.
   * @module model/V1PodAffinityTerm
   * @version v1.6.0
   */

  /**
   * Constructs a new <code>V1PodAffinityTerm</code>.
   * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key &lt;topologyKey&gt; tches that of any node on which a pod of the set of pods is running
   * @alias module:model/V1PodAffinityTerm
   * @class
   * @param namespaces {Array.<String>} namespaces specifies which namespaces the labelSelector applies to (matches against); nil list means \"this pod's namespace,\" empty list means \"all namespaces\" The json tag here is not \"omitempty\" since we need to distinguish nil and empty. See https://golang.org/pkg/encoding/json/#Marshal for more details.
   */
  var exports = function(namespaces) {
    var _this = this;


    _this['namespaces'] = namespaces;

  };

  /**
   * Constructs a <code>V1PodAffinityTerm</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V1PodAffinityTerm} obj Optional instance to populate.
   * @return {module:model/V1PodAffinityTerm} The populated <code>V1PodAffinityTerm</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('labelSelector')) {
        obj['labelSelector'] = V1LabelSelector.constructFromObject(data['labelSelector']);
      }
      if (data.hasOwnProperty('namespaces')) {
        obj['namespaces'] = ApiClient.convertToType(data['namespaces'], ['String']);
      }
      if (data.hasOwnProperty('topologyKey')) {
        obj['topologyKey'] = ApiClient.convertToType(data['topologyKey'], 'String');
      }
    }
    return obj;
  }

  /**
   * A label query over a set of resources, in this case pods.
   * @member {module:model/V1LabelSelector} labelSelector
   */
  exports.prototype['labelSelector'] = undefined;
  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); nil list means \"this pod's namespace,\" empty list means \"all namespaces\" The json tag here is not \"omitempty\" since we need to distinguish nil and empty. See https://golang.org/pkg/encoding/json/#Marshal for more details.
   * @member {Array.<String>} namespaces
   */
  exports.prototype['namespaces'] = undefined;
  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed.
   * @member {String} topologyKey
   */
  exports.prototype['topologyKey'] = undefined;



  return exports;
}));


