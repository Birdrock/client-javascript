/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResourceQuantity', 'model/V1AttachedVolume', 'model/V1ContainerImage', 'model/V1NodeAddress', 'model/V1NodeCondition', 'model/V1NodeDaemonEndpoints', 'model/V1NodeSystemInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ResourceQuantity'), require('./V1AttachedVolume'), require('./V1ContainerImage'), require('./V1NodeAddress'), require('./V1NodeCondition'), require('./V1NodeDaemonEndpoints'), require('./V1NodeSystemInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.V1NodeStatus = factory(root.Kubernetes.ApiClient, root.Kubernetes.ResourceQuantity, root.Kubernetes.V1AttachedVolume, root.Kubernetes.V1ContainerImage, root.Kubernetes.V1NodeAddress, root.Kubernetes.V1NodeCondition, root.Kubernetes.V1NodeDaemonEndpoints, root.Kubernetes.V1NodeSystemInfo);
  }
}(this, function(ApiClient, ResourceQuantity, V1AttachedVolume, V1ContainerImage, V1NodeAddress, V1NodeCondition, V1NodeDaemonEndpoints, V1NodeSystemInfo) {
  'use strict';




  /**
   * The V1NodeStatus model module.
   * @module model/V1NodeStatus
   * @version v1.6.0
   */

  /**
   * Constructs a new <code>V1NodeStatus</code>.
   * NodeStatus is information about the current status of a node.
   * @alias module:model/V1NodeStatus
   * @class
   */
  var exports = function() {
    var _this = this;











  };

  /**
   * Constructs a <code>V1NodeStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V1NodeStatus} obj Optional instance to populate.
   * @return {module:model/V1NodeStatus} The populated <code>V1NodeStatus</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('addresses')) {
        obj['addresses'] = ApiClient.convertToType(data['addresses'], [V1NodeAddress]);
      }
      if (data.hasOwnProperty('allocatable')) {
        obj['allocatable'] = ApiClient.convertToType(data['allocatable'], {'String': ResourceQuantity});
      }
      if (data.hasOwnProperty('capacity')) {
        obj['capacity'] = ApiClient.convertToType(data['capacity'], {'String': ResourceQuantity});
      }
      if (data.hasOwnProperty('conditions')) {
        obj['conditions'] = ApiClient.convertToType(data['conditions'], [V1NodeCondition]);
      }
      if (data.hasOwnProperty('daemonEndpoints')) {
        obj['daemonEndpoints'] = V1NodeDaemonEndpoints.constructFromObject(data['daemonEndpoints']);
      }
      if (data.hasOwnProperty('images')) {
        obj['images'] = ApiClient.convertToType(data['images'], [V1ContainerImage]);
      }
      if (data.hasOwnProperty('nodeInfo')) {
        obj['nodeInfo'] = V1NodeSystemInfo.constructFromObject(data['nodeInfo']);
      }
      if (data.hasOwnProperty('phase')) {
        obj['phase'] = ApiClient.convertToType(data['phase'], 'String');
      }
      if (data.hasOwnProperty('volumesAttached')) {
        obj['volumesAttached'] = ApiClient.convertToType(data['volumesAttached'], [V1AttachedVolume]);
      }
      if (data.hasOwnProperty('volumesInUse')) {
        obj['volumesInUse'] = ApiClient.convertToType(data['volumesInUse'], ['String']);
      }
    }
    return obj;
  }

  /**
   * List of addresses reachable to the node. Queried from cloud provider, if available. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-addresses
   * @member {Array.<module:model/V1NodeAddress>} addresses
   */
  exports.prototype['addresses'] = undefined;
  /**
   * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
   * @member {Object.<String, module:model/ResourceQuantity>} allocatable
   */
  exports.prototype['allocatable'] = undefined;
  /**
   * Capacity represents the total resources of a node. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#capacity for more details.
   * @member {Object.<String, module:model/ResourceQuantity>} capacity
   */
  exports.prototype['capacity'] = undefined;
  /**
   * Conditions is an array of current observed node conditions. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-condition
   * @member {Array.<module:model/V1NodeCondition>} conditions
   */
  exports.prototype['conditions'] = undefined;
  /**
   * Endpoints of daemons running on the Node.
   * @member {module:model/V1NodeDaemonEndpoints} daemonEndpoints
   */
  exports.prototype['daemonEndpoints'] = undefined;
  /**
   * List of container images on this node
   * @member {Array.<module:model/V1ContainerImage>} images
   */
  exports.prototype['images'] = undefined;
  /**
   * Set of ids/uuids to uniquely identify the node. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-info
   * @member {module:model/V1NodeSystemInfo} nodeInfo
   */
  exports.prototype['nodeInfo'] = undefined;
  /**
   * NodePhase is the recently observed lifecycle phase of the node. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-phase The field is never populated, and now is deprecated.
   * @member {String} phase
   */
  exports.prototype['phase'] = undefined;
  /**
   * List of volumes that are attached to the node.
   * @member {Array.<module:model/V1AttachedVolume>} volumesAttached
   */
  exports.prototype['volumesAttached'] = undefined;
  /**
   * List of attachable volumes in use (mounted) by the node.
   * @member {Array.<String>} volumesInUse
   */
  exports.prototype['volumesInUse'] = undefined;



  return exports;
}));


