/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: unversioned
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.VersionInfo = factory(root.Kubernetes.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The VersionInfo model module.
   * @module model/VersionInfo
   * @version unversioned
   */

  /**
   * Constructs a new <code>VersionInfo</code>.
   * Info contains versioning information. how we&#39;ll want to distribute that information.
   * @alias module:model/VersionInfo
   * @class
   * @param buildDate {String} 
   * @param compiler {String} 
   * @param gitCommit {String} 
   * @param gitTreeState {String} 
   * @param gitVersion {String} 
   * @param goVersion {String} 
   * @param major {String} 
   * @param minor {String} 
   * @param platform {String} 
   */
  var exports = function(buildDate, compiler, gitCommit, gitTreeState, gitVersion, goVersion, major, minor, platform) {
    var _this = this;

    _this['buildDate'] = buildDate;
    _this['compiler'] = compiler;
    _this['gitCommit'] = gitCommit;
    _this['gitTreeState'] = gitTreeState;
    _this['gitVersion'] = gitVersion;
    _this['goVersion'] = goVersion;
    _this['major'] = major;
    _this['minor'] = minor;
    _this['platform'] = platform;
  };

  /**
   * Constructs a <code>VersionInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VersionInfo} obj Optional instance to populate.
   * @return {module:model/VersionInfo} The populated <code>VersionInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('buildDate')) {
        obj['buildDate'] = ApiClient.convertToType(data['buildDate'], 'String');
      }
      if (data.hasOwnProperty('compiler')) {
        obj['compiler'] = ApiClient.convertToType(data['compiler'], 'String');
      }
      if (data.hasOwnProperty('gitCommit')) {
        obj['gitCommit'] = ApiClient.convertToType(data['gitCommit'], 'String');
      }
      if (data.hasOwnProperty('gitTreeState')) {
        obj['gitTreeState'] = ApiClient.convertToType(data['gitTreeState'], 'String');
      }
      if (data.hasOwnProperty('gitVersion')) {
        obj['gitVersion'] = ApiClient.convertToType(data['gitVersion'], 'String');
      }
      if (data.hasOwnProperty('goVersion')) {
        obj['goVersion'] = ApiClient.convertToType(data['goVersion'], 'String');
      }
      if (data.hasOwnProperty('major')) {
        obj['major'] = ApiClient.convertToType(data['major'], 'String');
      }
      if (data.hasOwnProperty('minor')) {
        obj['minor'] = ApiClient.convertToType(data['minor'], 'String');
      }
      if (data.hasOwnProperty('platform')) {
        obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {String} buildDate
   */
  exports.prototype['buildDate'] = undefined;
  /**
   * @member {String} compiler
   */
  exports.prototype['compiler'] = undefined;
  /**
   * @member {String} gitCommit
   */
  exports.prototype['gitCommit'] = undefined;
  /**
   * @member {String} gitTreeState
   */
  exports.prototype['gitTreeState'] = undefined;
  /**
   * @member {String} gitVersion
   */
  exports.prototype['gitVersion'] = undefined;
  /**
   * @member {String} goVersion
   */
  exports.prototype['goVersion'] = undefined;
  /**
   * @member {String} major
   */
  exports.prototype['major'] = undefined;
  /**
   * @member {String} minor
   */
  exports.prototype['minor'] = undefined;
  /**
   * @member {String} platform
   */
  exports.prototype['platform'] = undefined;



  return exports;
}));


