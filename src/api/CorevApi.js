/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: unversioned
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1Namespace', 'model/V1Binding', 'model/V1ConfigMap', 'model/V1Endpoints', 'model/V1Event', 'model/V1beta1Eviction', 'model/V1LimitRange', 'model/V1PersistentVolumeClaim', 'model/V1Pod', 'model/V1PodTemplate', 'model/V1ReplicationController', 'model/V1ResourceQuota', 'model/V1Secret', 'model/V1Service', 'model/V1ServiceAccount', 'model/V1Node', 'model/V1PersistentVolume', 'model/UnversionedStatus', 'model/V1DeleteOptions', 'model/UnversionedAPIResourceList', 'model/V1ComponentStatusList', 'model/V1ConfigMapList', 'model/V1EndpointsList', 'model/V1EventList', 'model/V1LimitRangeList', 'model/V1NamespaceList', 'model/V1PersistentVolumeClaimList', 'model/V1PodList', 'model/V1PodTemplateList', 'model/V1ReplicationControllerList', 'model/V1ResourceQuotaList', 'model/V1SecretList', 'model/V1ServiceList', 'model/V1ServiceAccountList', 'model/V1NodeList', 'model/V1PersistentVolumeList', 'model/UnversionedPatch', 'model/V1Scale', 'model/V1ComponentStatus', 'model/VersionedEvent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V1Namespace'), require('../model/V1Binding'), require('../model/V1ConfigMap'), require('../model/V1Endpoints'), require('../model/V1Event'), require('../model/V1beta1Eviction'), require('../model/V1LimitRange'), require('../model/V1PersistentVolumeClaim'), require('../model/V1Pod'), require('../model/V1PodTemplate'), require('../model/V1ReplicationController'), require('../model/V1ResourceQuota'), require('../model/V1Secret'), require('../model/V1Service'), require('../model/V1ServiceAccount'), require('../model/V1Node'), require('../model/V1PersistentVolume'), require('../model/UnversionedStatus'), require('../model/V1DeleteOptions'), require('../model/UnversionedAPIResourceList'), require('../model/V1ComponentStatusList'), require('../model/V1ConfigMapList'), require('../model/V1EndpointsList'), require('../model/V1EventList'), require('../model/V1LimitRangeList'), require('../model/V1NamespaceList'), require('../model/V1PersistentVolumeClaimList'), require('../model/V1PodList'), require('../model/V1PodTemplateList'), require('../model/V1ReplicationControllerList'), require('../model/V1ResourceQuotaList'), require('../model/V1SecretList'), require('../model/V1ServiceList'), require('../model/V1ServiceAccountList'), require('../model/V1NodeList'), require('../model/V1PersistentVolumeList'), require('../model/UnversionedPatch'), require('../model/V1Scale'), require('../model/V1ComponentStatus'), require('../model/VersionedEvent'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.CorevApi = factory(root.Kubernetes.ApiClient, root.Kubernetes.V1Namespace, root.Kubernetes.V1Binding, root.Kubernetes.V1ConfigMap, root.Kubernetes.V1Endpoints, root.Kubernetes.V1Event, root.Kubernetes.V1beta1Eviction, root.Kubernetes.V1LimitRange, root.Kubernetes.V1PersistentVolumeClaim, root.Kubernetes.V1Pod, root.Kubernetes.V1PodTemplate, root.Kubernetes.V1ReplicationController, root.Kubernetes.V1ResourceQuota, root.Kubernetes.V1Secret, root.Kubernetes.V1Service, root.Kubernetes.V1ServiceAccount, root.Kubernetes.V1Node, root.Kubernetes.V1PersistentVolume, root.Kubernetes.UnversionedStatus, root.Kubernetes.V1DeleteOptions, root.Kubernetes.UnversionedAPIResourceList, root.Kubernetes.V1ComponentStatusList, root.Kubernetes.V1ConfigMapList, root.Kubernetes.V1EndpointsList, root.Kubernetes.V1EventList, root.Kubernetes.V1LimitRangeList, root.Kubernetes.V1NamespaceList, root.Kubernetes.V1PersistentVolumeClaimList, root.Kubernetes.V1PodList, root.Kubernetes.V1PodTemplateList, root.Kubernetes.V1ReplicationControllerList, root.Kubernetes.V1ResourceQuotaList, root.Kubernetes.V1SecretList, root.Kubernetes.V1ServiceList, root.Kubernetes.V1ServiceAccountList, root.Kubernetes.V1NodeList, root.Kubernetes.V1PersistentVolumeList, root.Kubernetes.UnversionedPatch, root.Kubernetes.V1Scale, root.Kubernetes.V1ComponentStatus, root.Kubernetes.VersionedEvent);
  }
}(this, function(ApiClient, V1Namespace, V1Binding, V1ConfigMap, V1Endpoints, V1Event, V1beta1Eviction, V1LimitRange, V1PersistentVolumeClaim, V1Pod, V1PodTemplate, V1ReplicationController, V1ResourceQuota, V1Secret, V1Service, V1ServiceAccount, V1Node, V1PersistentVolume, UnversionedStatus, V1DeleteOptions, UnversionedAPIResourceList, V1ComponentStatusList, V1ConfigMapList, V1EndpointsList, V1EventList, V1LimitRangeList, V1NamespaceList, V1PersistentVolumeClaimList, V1PodList, V1PodTemplateList, V1ReplicationControllerList, V1ResourceQuotaList, V1SecretList, V1ServiceList, V1ServiceAccountList, V1NodeList, V1PersistentVolumeList, UnversionedPatch, V1Scale, V1ComponentStatus, VersionedEvent) {
  'use strict';

  /**
   * Corev service.
   * @module api/CorevApi
   * @version unversioned
   */

  /**
   * Constructs a new CorevApi. 
   * @alias module:api/CorevApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the connectCoreV1DeleteNamespacedPodProxy operation.
     * @callback module:api/CorevApi~connectCoreV1DeleteNamespacedPodProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect DELETE requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1DeleteNamespacedPodProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1DeleteNamespacedPodProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1DeleteNamespacedPodProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1DeleteNamespacedPodProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1DeleteNamespacedPodProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1DeleteNamespacedPodProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect DELETE requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1DeleteNamespacedPodProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1DeleteNamespacedPodProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1DeleteNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1DeleteNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1DeleteNamespacedPodProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1DeleteNamespacedServiceProxy operation.
     * @callback module:api/CorevApi~connectCoreV1DeleteNamespacedServiceProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect DELETE requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1DeleteNamespacedServiceProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1DeleteNamespacedServiceProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1DeleteNamespacedServiceProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1DeleteNamespacedServiceProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1DeleteNamespacedServiceProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1DeleteNamespacedServiceProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect DELETE requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1DeleteNamespacedServiceProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1DeleteNamespacedServiceProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1DeleteNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1DeleteNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1DeleteNamespacedServiceProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1DeleteNodeProxy operation.
     * @callback module:api/CorevApi~connectCoreV1DeleteNodeProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect DELETE requests to proxy of Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1DeleteNodeProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1DeleteNodeProxy = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1DeleteNodeProxy";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1DeleteNodeProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1DeleteNodeProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect DELETE requests to proxy of Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1DeleteNodeProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1DeleteNodeProxyWithPath = function(name, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1DeleteNodeProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1DeleteNodeProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNamespacedPodAttach operation.
     * @callback module:api/CorevApi~connectCoreV1GetNamespacedPodAttachCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to attach of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param {Boolean} opts.stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param {Boolean} opts.stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param {Boolean} opts.stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param {Boolean} opts.tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @param {module:api/CorevApi~connectCoreV1GetNamespacedPodAttachCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNamespacedPodAttach = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNamespacedPodAttach";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1GetNamespacedPodAttach";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'container': opts['container'],
        'stderr': opts['stderr'],
        'stdin': opts['stdin'],
        'stdout': opts['stdout'],
        'tty': opts['tty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/attach', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNamespacedPodExec operation.
     * @callback module:api/CorevApi~connectCoreV1GetNamespacedPodExecCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to exec of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param {String} opts.container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param {Boolean} opts.stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param {Boolean} opts.stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param {Boolean} opts.stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param {Boolean} opts.tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @param {module:api/CorevApi~connectCoreV1GetNamespacedPodExecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNamespacedPodExec = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNamespacedPodExec";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1GetNamespacedPodExec";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'command': opts['command'],
        'container': opts['container'],
        'stderr': opts['stderr'],
        'stdin': opts['stdin'],
        'stdout': opts['stdout'],
        'tty': opts['tty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/exec', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNamespacedPodPortforward operation.
     * @callback module:api/CorevApi~connectCoreV1GetNamespacedPodPortforwardCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to portforward of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~connectCoreV1GetNamespacedPodPortforwardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNamespacedPodPortforward = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNamespacedPodPortforward";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1GetNamespacedPodPortforward";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/portforward', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNamespacedPodProxy operation.
     * @callback module:api/CorevApi~connectCoreV1GetNamespacedPodProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1GetNamespacedPodProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNamespacedPodProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNamespacedPodProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1GetNamespacedPodProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNamespacedPodProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1GetNamespacedPodProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1GetNamespacedPodProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNamespacedPodProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1GetNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1GetNamespacedPodProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNamespacedServiceProxy operation.
     * @callback module:api/CorevApi~connectCoreV1GetNamespacedServiceProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1GetNamespacedServiceProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNamespacedServiceProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNamespacedServiceProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1GetNamespacedServiceProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNamespacedServiceProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1GetNamespacedServiceProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1GetNamespacedServiceProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNamespacedServiceProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1GetNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1GetNamespacedServiceProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNodeProxy operation.
     * @callback module:api/CorevApi~connectCoreV1GetNodeProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to proxy of Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1GetNodeProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNodeProxy = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNodeProxy";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1GetNodeProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1GetNodeProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect GET requests to proxy of Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1GetNodeProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1GetNodeProxyWithPath = function(name, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1GetNodeProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1GetNodeProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1HeadNamespacedPodProxy operation.
     * @callback module:api/CorevApi~connectCoreV1HeadNamespacedPodProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect HEAD requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1HeadNamespacedPodProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1HeadNamespacedPodProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1HeadNamespacedPodProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1HeadNamespacedPodProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1HeadNamespacedPodProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1HeadNamespacedPodProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect HEAD requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1HeadNamespacedPodProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1HeadNamespacedPodProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1HeadNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1HeadNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1HeadNamespacedPodProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1HeadNamespacedServiceProxy operation.
     * @callback module:api/CorevApi~connectCoreV1HeadNamespacedServiceProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect HEAD requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1HeadNamespacedServiceProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1HeadNamespacedServiceProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1HeadNamespacedServiceProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1HeadNamespacedServiceProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1HeadNamespacedServiceProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1HeadNamespacedServiceProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect HEAD requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1HeadNamespacedServiceProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1HeadNamespacedServiceProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1HeadNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1HeadNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1HeadNamespacedServiceProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1HeadNodeProxy operation.
     * @callback module:api/CorevApi~connectCoreV1HeadNodeProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect HEAD requests to proxy of Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1HeadNodeProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1HeadNodeProxy = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1HeadNodeProxy";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1HeadNodeProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1HeadNodeProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect HEAD requests to proxy of Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1HeadNodeProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1HeadNodeProxyWithPath = function(name, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1HeadNodeProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1HeadNodeProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy/{path}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1OptionsNamespacedPodProxy operation.
     * @callback module:api/CorevApi~connectCoreV1OptionsNamespacedPodProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect OPTIONS requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1OptionsNamespacedPodProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1OptionsNamespacedPodProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1OptionsNamespacedPodProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1OptionsNamespacedPodProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1OptionsNamespacedPodProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1OptionsNamespacedPodProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect OPTIONS requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1OptionsNamespacedPodProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1OptionsNamespacedPodProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1OptionsNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1OptionsNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1OptionsNamespacedPodProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1OptionsNamespacedServiceProxy operation.
     * @callback module:api/CorevApi~connectCoreV1OptionsNamespacedServiceProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect OPTIONS requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1OptionsNamespacedServiceProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1OptionsNamespacedServiceProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1OptionsNamespacedServiceProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1OptionsNamespacedServiceProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1OptionsNamespacedServiceProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1OptionsNamespacedServiceProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect OPTIONS requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1OptionsNamespacedServiceProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1OptionsNamespacedServiceProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1OptionsNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1OptionsNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1OptionsNamespacedServiceProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1OptionsNodeProxy operation.
     * @callback module:api/CorevApi~connectCoreV1OptionsNodeProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect OPTIONS requests to proxy of Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1OptionsNodeProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1OptionsNodeProxy = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1OptionsNodeProxy";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1OptionsNodeProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1OptionsNodeProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect OPTIONS requests to proxy of Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1OptionsNodeProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1OptionsNodeProxyWithPath = function(name, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1OptionsNodeProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1OptionsNodeProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy/{path}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNamespacedPodAttach operation.
     * @callback module:api/CorevApi~connectCoreV1PostNamespacedPodAttachCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to attach of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param {Boolean} opts.stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param {Boolean} opts.stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param {Boolean} opts.stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param {Boolean} opts.tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @param {module:api/CorevApi~connectCoreV1PostNamespacedPodAttachCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNamespacedPodAttach = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNamespacedPodAttach";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PostNamespacedPodAttach";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'container': opts['container'],
        'stderr': opts['stderr'],
        'stdin': opts['stdin'],
        'stdout': opts['stdout'],
        'tty': opts['tty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/attach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNamespacedPodExec operation.
     * @callback module:api/CorevApi~connectCoreV1PostNamespacedPodExecCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to exec of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param {String} opts.container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param {Boolean} opts.stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param {Boolean} opts.stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param {Boolean} opts.stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param {Boolean} opts.tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @param {module:api/CorevApi~connectCoreV1PostNamespacedPodExecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNamespacedPodExec = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNamespacedPodExec";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PostNamespacedPodExec";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'command': opts['command'],
        'container': opts['container'],
        'stderr': opts['stderr'],
        'stdin': opts['stdin'],
        'stdout': opts['stdout'],
        'tty': opts['tty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/exec', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNamespacedPodPortforward operation.
     * @callback module:api/CorevApi~connectCoreV1PostNamespacedPodPortforwardCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to portforward of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~connectCoreV1PostNamespacedPodPortforwardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNamespacedPodPortforward = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNamespacedPodPortforward";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PostNamespacedPodPortforward";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/portforward', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNamespacedPodProxy operation.
     * @callback module:api/CorevApi~connectCoreV1PostNamespacedPodProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1PostNamespacedPodProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNamespacedPodProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNamespacedPodProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PostNamespacedPodProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNamespacedPodProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1PostNamespacedPodProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1PostNamespacedPodProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNamespacedPodProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PostNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1PostNamespacedPodProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNamespacedServiceProxy operation.
     * @callback module:api/CorevApi~connectCoreV1PostNamespacedServiceProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1PostNamespacedServiceProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNamespacedServiceProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNamespacedServiceProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PostNamespacedServiceProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNamespacedServiceProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1PostNamespacedServiceProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1PostNamespacedServiceProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNamespacedServiceProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PostNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1PostNamespacedServiceProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNodeProxy operation.
     * @callback module:api/CorevApi~connectCoreV1PostNodeProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to proxy of Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1PostNodeProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNodeProxy = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNodeProxy";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PostNodeProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1PostNodeProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to proxy of Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1PostNodeProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PostNodeProxyWithPath = function(name, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PostNodeProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1PostNodeProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PutNamespacedPodProxy operation.
     * @callback module:api/CorevApi~connectCoreV1PutNamespacedPodProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect PUT requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1PutNamespacedPodProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PutNamespacedPodProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PutNamespacedPodProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PutNamespacedPodProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PutNamespacedPodProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1PutNamespacedPodProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect PUT requests to proxy of Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/CorevApi~connectCoreV1PutNamespacedPodProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PutNamespacedPodProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PutNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PutNamespacedPodProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1PutNamespacedPodProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PutNamespacedServiceProxy operation.
     * @callback module:api/CorevApi~connectCoreV1PutNamespacedServiceProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect PUT requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1PutNamespacedServiceProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PutNamespacedServiceProxy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PutNamespacedServiceProxy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PutNamespacedServiceProxy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PutNamespacedServiceProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1PutNamespacedServiceProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect PUT requests to proxy of Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
     * @param {module:api/CorevApi~connectCoreV1PutNamespacedServiceProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PutNamespacedServiceProxyWithPath = function(name, namespace, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PutNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling connectCoreV1PutNamespacedServiceProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1PutNamespacedServiceProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PutNodeProxy operation.
     * @callback module:api/CorevApi~connectCoreV1PutNodeProxyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect PUT requests to proxy of Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1PutNodeProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PutNodeProxy = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PutNodeProxy";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectCoreV1PutNodeProxyWithPath operation.
     * @callback module:api/CorevApi~connectCoreV1PutNodeProxyWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect PUT requests to proxy of Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to node.
     * @param {module:api/CorevApi~connectCoreV1PutNodeProxyWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.connectCoreV1PutNodeProxyWithPath = function(name, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling connectCoreV1PutNodeProxyWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling connectCoreV1PutNodeProxyWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
        'path': opts['path2']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/proxy/{path}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1Namespace operation.
     * @callback module:api/CorevApi~createCoreV1NamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Namespace
     * @param {module:model/V1Namespace} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Namespace}
     */
    this.createCoreV1Namespace = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1Namespace";
      }


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Namespace;

      return this.apiClient.callApi(
        '/api/v1/namespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedBinding operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Binding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Binding
     * @param {module:model/V1Binding} body 
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Binding}
     */
    this.createCoreV1NamespacedBinding = function(body, namespace, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedBinding";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedBinding";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Binding;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/bindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedBindingBinding operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedBindingBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Binding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create binding of a Binding
     * @param {module:model/V1Binding} body 
     * @param {String} name name of the Binding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedBindingBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Binding}
     */
    this.createCoreV1NamespacedBindingBinding = function(body, name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedBindingBinding";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling createCoreV1NamespacedBindingBinding";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedBindingBinding";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Binding;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/binding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedConfigMap operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedConfigMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ConfigMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ConfigMap} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedConfigMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ConfigMap}
     */
    this.createCoreV1NamespacedConfigMap = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedConfigMap";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ConfigMap;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/configmaps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedEndpoints operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Endpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Endpoints} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Endpoints}
     */
    this.createCoreV1NamespacedEndpoints = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedEndpoints";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Endpoints;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/endpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedEvent operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Event} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Event}
     */
    this.createCoreV1NamespacedEvent = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedEvent";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedEvent";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Event;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedEvictionEviction operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedEvictionEvictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Eviction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create eviction of an Eviction
     * @param {module:model/V1beta1Eviction} body 
     * @param {String} name name of the Eviction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedEvictionEvictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Eviction}
     */
    this.createCoreV1NamespacedEvictionEviction = function(body, name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedEvictionEviction";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling createCoreV1NamespacedEvictionEviction";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedEvictionEviction";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Eviction;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/eviction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedLimitRange operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedLimitRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LimitRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1LimitRange} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedLimitRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LimitRange}
     */
    this.createCoreV1NamespacedLimitRange = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedLimitRange";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1LimitRange;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/limitranges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedPersistentVolumeClaim operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedPersistentVolumeClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1PersistentVolumeClaim} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedPersistentVolumeClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaim}
     */
    this.createCoreV1NamespacedPersistentVolumeClaim = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedPersistentVolumeClaim";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolumeClaim;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedPod operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Pod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Pod} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Pod}
     */
    this.createCoreV1NamespacedPod = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedPod";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedPod";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Pod;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedPodTemplate operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedPodTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PodTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1PodTemplate} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedPodTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PodTemplate}
     */
    this.createCoreV1NamespacedPodTemplate = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedPodTemplate";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PodTemplate;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/podtemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedReplicationController operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedReplicationControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationController} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ReplicationController} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedReplicationControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationController}
     */
    this.createCoreV1NamespacedReplicationController = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedReplicationController";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ReplicationController;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedResourceQuota operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedResourceQuotaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuota} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ResourceQuota} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedResourceQuotaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuota}
     */
    this.createCoreV1NamespacedResourceQuota = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedResourceQuota";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ResourceQuota;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedSecret operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Secret} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Secret}
     */
    this.createCoreV1NamespacedSecret = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedSecret";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedSecret";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Secret;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/secrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedService operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Service} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Service}
     */
    this.createCoreV1NamespacedService = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedService";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedService";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Service;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1NamespacedServiceAccount operation.
     * @callback module:api/CorevApi~createCoreV1NamespacedServiceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ServiceAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ServiceAccount} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NamespacedServiceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ServiceAccount}
     */
    this.createCoreV1NamespacedServiceAccount = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1NamespacedServiceAccount";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ServiceAccount;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/serviceaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1Node operation.
     * @callback module:api/CorevApi~createCoreV1NodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Node
     * @param {module:model/V1Node} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1NodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Node}
     */
    this.createCoreV1Node = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1Node";
      }


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Node;

      return this.apiClient.callApi(
        '/api/v1/nodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCoreV1PersistentVolume operation.
     * @callback module:api/CorevApi~createCoreV1PersistentVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a PersistentVolume
     * @param {module:model/V1PersistentVolume} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~createCoreV1PersistentVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolume}
     */
    this.createCoreV1PersistentVolume = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCoreV1PersistentVolume";
      }


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolume;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespace operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Namespace
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespace = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedConfigMap operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedConfigMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedConfigMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedConfigMap = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedConfigMap";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/configmaps', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedEndpoints operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedEndpoints = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedEndpoints";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/endpoints', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedEvent operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedEvent = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedEvent";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/events', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedLimitRange operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedLimitRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedLimitRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedLimitRange = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedLimitRange";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/limitranges', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedPersistentVolumeClaim operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedPersistentVolumeClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedPersistentVolumeClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedPersistentVolumeClaim = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedPersistentVolumeClaim";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedPod operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedPod = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedPod";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedPodTemplate operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedPodTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedPodTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedPodTemplate = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedPodTemplate";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/podtemplates', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedReplicationController operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedReplicationControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedReplicationControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedReplicationController = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedReplicationController";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedResourceQuota operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedResourceQuotaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedResourceQuotaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedResourceQuota = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedResourceQuota";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedSecret operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedSecret = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedSecret";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/secrets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNamespacedServiceAccount operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNamespacedServiceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNamespacedServiceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNamespacedServiceAccount = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1CollectionNamespacedServiceAccount";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/serviceaccounts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionNode operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionNode = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/nodes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1CollectionPersistentVolume operation.
     * @callback module:api/CorevApi~deleteCoreV1CollectionPersistentVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of PersistentVolume
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~deleteCoreV1CollectionPersistentVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1CollectionPersistentVolume = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1Namespace operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Namespace
     * @param {String} name name of the Namespace
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1Namespace = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1Namespace";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1Namespace";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedConfigMap operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedConfigMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ConfigMap
     * @param {String} name name of the ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedConfigMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedConfigMap = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedConfigMap";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/configmaps/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedEndpoints operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Endpoints
     * @param {String} name name of the Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedEndpoints = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedEndpoints";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/endpoints/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedEvent operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an Event
     * @param {String} name name of the Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedEvent = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedEvent";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedEvent";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedEvent";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/events/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedLimitRange operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedLimitRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a LimitRange
     * @param {String} name name of the LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedLimitRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedLimitRange = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedLimitRange";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/limitranges/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedPersistentVolumeClaim operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedPersistentVolumeClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a PersistentVolumeClaim
     * @param {String} name name of the PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedPersistentVolumeClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedPersistentVolumeClaim = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedPersistentVolumeClaim";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedPod operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedPod = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedPod";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedPodTemplate operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedPodTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a PodTemplate
     * @param {String} name name of the PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedPodTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedPodTemplate = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedPodTemplate";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/podtemplates/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedReplicationController operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedReplicationControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ReplicationController
     * @param {String} name name of the ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedReplicationControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedReplicationController = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedReplicationController";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedResourceQuota operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedResourceQuotaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ResourceQuota
     * @param {String} name name of the ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedResourceQuotaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedResourceQuota = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedResourceQuota";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedSecret operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Secret
     * @param {String} name name of the Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedSecret = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedSecret";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedSecret";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedSecret";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/secrets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedService operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedService = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1NamespacedServiceAccount operation.
     * @callback module:api/CorevApi~deleteCoreV1NamespacedServiceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ServiceAccount
     * @param {String} name name of the ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NamespacedServiceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1NamespacedServiceAccount = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1NamespacedServiceAccount";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/serviceaccounts/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1Node operation.
     * @callback module:api/CorevApi~deleteCoreV1NodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Node
     * @param {String} name name of the Node
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1NodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1Node = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1Node";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1Node";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreV1PersistentVolume operation.
     * @callback module:api/CorevApi~deleteCoreV1PersistentVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a PersistentVolume
     * @param {String} name name of the PersistentVolume
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/CorevApi~deleteCoreV1PersistentVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteCoreV1PersistentVolume = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteCoreV1PersistentVolume";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteCoreV1PersistentVolume";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCoreV1APIResources operation.
     * @callback module:api/CorevApi~getCoreV1APIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedAPIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:api/CorevApi~getCoreV1APIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedAPIResourceList}
     */
    this.getCoreV1APIResources = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedAPIResourceList;

      return this.apiClient.callApi(
        '/api/v1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1ComponentStatus operation.
     * @callback module:api/CorevApi~listCoreV1ComponentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ComponentStatusList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind ComponentStatus
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1ComponentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ComponentStatusList}
     */
    this.listCoreV1ComponentStatus = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ComponentStatusList;

      return this.apiClient.callApi(
        '/api/v1/componentstatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1ConfigMapForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1ConfigMapForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ConfigMapList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ConfigMap
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1ConfigMapForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ConfigMapList}
     */
    this.listCoreV1ConfigMapForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ConfigMapList;

      return this.apiClient.callApi(
        '/api/v1/configmaps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1EndpointsForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1EndpointsForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EndpointsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Endpoints
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1EndpointsForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EndpointsList}
     */
    this.listCoreV1EndpointsForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1EndpointsList;

      return this.apiClient.callApi(
        '/api/v1/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1EventForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1EventForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EventList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Event
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1EventForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EventList}
     */
    this.listCoreV1EventForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1EventList;

      return this.apiClient.callApi(
        '/api/v1/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1LimitRangeForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1LimitRangeForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LimitRangeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind LimitRange
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1LimitRangeForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LimitRangeList}
     */
    this.listCoreV1LimitRangeForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1LimitRangeList;

      return this.apiClient.callApi(
        '/api/v1/limitranges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1Namespace operation.
     * @callback module:api/CorevApi~listCoreV1NamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1NamespaceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Namespace
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1NamespaceList}
     */
    this.listCoreV1Namespace = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1NamespaceList;

      return this.apiClient.callApi(
        '/api/v1/namespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedConfigMap operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedConfigMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ConfigMapList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedConfigMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ConfigMapList}
     */
    this.listCoreV1NamespacedConfigMap = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedConfigMap";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ConfigMapList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/configmaps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedEndpoints operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EndpointsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EndpointsList}
     */
    this.listCoreV1NamespacedEndpoints = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedEndpoints";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1EndpointsList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedEvent operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EventList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EventList}
     */
    this.listCoreV1NamespacedEvent = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedEvent";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1EventList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedLimitRange operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedLimitRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LimitRangeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedLimitRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LimitRangeList}
     */
    this.listCoreV1NamespacedLimitRange = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedLimitRange";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1LimitRangeList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/limitranges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedPersistentVolumeClaim operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedPersistentVolumeClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaimList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedPersistentVolumeClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaimList}
     */
    this.listCoreV1NamespacedPersistentVolumeClaim = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedPersistentVolumeClaim";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1PersistentVolumeClaimList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedPod operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PodList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PodList}
     */
    this.listCoreV1NamespacedPod = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedPod";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1PodList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedPodTemplate operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedPodTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PodTemplateList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedPodTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PodTemplateList}
     */
    this.listCoreV1NamespacedPodTemplate = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedPodTemplate";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1PodTemplateList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/podtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedReplicationController operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedReplicationControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationControllerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedReplicationControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationControllerList}
     */
    this.listCoreV1NamespacedReplicationController = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedReplicationController";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ReplicationControllerList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedResourceQuota operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedResourceQuotaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuotaList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedResourceQuotaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuotaList}
     */
    this.listCoreV1NamespacedResourceQuota = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedResourceQuota";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ResourceQuotaList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedSecret operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1SecretList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1SecretList}
     */
    this.listCoreV1NamespacedSecret = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedSecret";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1SecretList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedService operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ServiceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ServiceList}
     */
    this.listCoreV1NamespacedService = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedService";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ServiceList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1NamespacedServiceAccount operation.
     * @callback module:api/CorevApi~listCoreV1NamespacedServiceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ServiceAccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NamespacedServiceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ServiceAccountList}
     */
    this.listCoreV1NamespacedServiceAccount = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listCoreV1NamespacedServiceAccount";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ServiceAccountList;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/serviceaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1Node operation.
     * @callback module:api/CorevApi~listCoreV1NodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1NodeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1NodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1NodeList}
     */
    this.listCoreV1Node = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1NodeList;

      return this.apiClient.callApi(
        '/api/v1/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1PersistentVolume operation.
     * @callback module:api/CorevApi~listCoreV1PersistentVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind PersistentVolume
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1PersistentVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeList}
     */
    this.listCoreV1PersistentVolume = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1PersistentVolumeList;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1PersistentVolumeClaimForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1PersistentVolumeClaimForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaimList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind PersistentVolumeClaim
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1PersistentVolumeClaimForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaimList}
     */
    this.listCoreV1PersistentVolumeClaimForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1PersistentVolumeClaimList;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumeclaims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1PodForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1PodForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PodList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Pod
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1PodForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PodList}
     */
    this.listCoreV1PodForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1PodList;

      return this.apiClient.callApi(
        '/api/v1/pods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1PodTemplateForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1PodTemplateForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PodTemplateList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind PodTemplate
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1PodTemplateForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PodTemplateList}
     */
    this.listCoreV1PodTemplateForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1PodTemplateList;

      return this.apiClient.callApi(
        '/api/v1/podtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1ReplicationControllerForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1ReplicationControllerForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationControllerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ReplicationController
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1ReplicationControllerForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationControllerList}
     */
    this.listCoreV1ReplicationControllerForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ReplicationControllerList;

      return this.apiClient.callApi(
        '/api/v1/replicationcontrollers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1ResourceQuotaForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1ResourceQuotaForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuotaList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ResourceQuota
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1ResourceQuotaForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuotaList}
     */
    this.listCoreV1ResourceQuotaForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ResourceQuotaList;

      return this.apiClient.callApi(
        '/api/v1/resourcequotas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1SecretForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1SecretForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1SecretList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Secret
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1SecretForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1SecretList}
     */
    this.listCoreV1SecretForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1SecretList;

      return this.apiClient.callApi(
        '/api/v1/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1ServiceAccountForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1ServiceAccountForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ServiceAccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ServiceAccount
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1ServiceAccountForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ServiceAccountList}
     */
    this.listCoreV1ServiceAccountForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ServiceAccountList;

      return this.apiClient.callApi(
        '/api/v1/serviceaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreV1ServiceForAllNamespaces operation.
     * @callback module:api/CorevApi~listCoreV1ServiceForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ServiceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Service
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~listCoreV1ServiceForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ServiceList}
     */
    this.listCoreV1ServiceForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1ServiceList;

      return this.apiClient.callApi(
        '/api/v1/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1Namespace operation.
     * @callback module:api/CorevApi~patchCoreV1NamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Namespace
     * @param {String} name name of the Namespace
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Namespace}
     */
    this.patchCoreV1Namespace = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1Namespace";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1Namespace";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Namespace;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespaceStatus operation.
     * @callback module:api/CorevApi~patchCoreV1NamespaceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Namespace
     * @param {String} name name of the Namespace
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespaceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Namespace}
     */
    this.patchCoreV1NamespaceStatus = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespaceStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespaceStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Namespace;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedConfigMap operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedConfigMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ConfigMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ConfigMap
     * @param {String} name name of the ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedConfigMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ConfigMap}
     */
    this.patchCoreV1NamespacedConfigMap = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedConfigMap";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ConfigMap;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/configmaps/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedEndpoints operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Endpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Endpoints
     * @param {String} name name of the Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Endpoints}
     */
    this.patchCoreV1NamespacedEndpoints = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedEndpoints";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Endpoints;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/endpoints/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedEvent operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Event
     * @param {String} name name of the Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Event}
     */
    this.patchCoreV1NamespacedEvent = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedEvent";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedEvent";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedEvent";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Event;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/events/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedLimitRange operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedLimitRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LimitRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified LimitRange
     * @param {String} name name of the LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedLimitRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LimitRange}
     */
    this.patchCoreV1NamespacedLimitRange = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedLimitRange";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1LimitRange;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/limitranges/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedPersistentVolumeClaim operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedPersistentVolumeClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified PersistentVolumeClaim
     * @param {String} name name of the PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedPersistentVolumeClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaim}
     */
    this.patchCoreV1NamespacedPersistentVolumeClaim = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedPersistentVolumeClaim";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolumeClaim;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedPersistentVolumeClaimStatus operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedPersistentVolumeClaimStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified PersistentVolumeClaim
     * @param {String} name name of the PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedPersistentVolumeClaimStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaim}
     */
    this.patchCoreV1NamespacedPersistentVolumeClaimStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedPersistentVolumeClaimStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedPersistentVolumeClaimStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedPersistentVolumeClaimStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolumeClaim;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedPod operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Pod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Pod}
     */
    this.patchCoreV1NamespacedPod = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedPod";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Pod;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedPodStatus operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedPodStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Pod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedPodStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Pod}
     */
    this.patchCoreV1NamespacedPodStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedPodStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedPodStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedPodStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Pod;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedPodTemplate operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedPodTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PodTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified PodTemplate
     * @param {String} name name of the PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedPodTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PodTemplate}
     */
    this.patchCoreV1NamespacedPodTemplate = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedPodTemplate";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PodTemplate;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/podtemplates/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedReplicationController operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedReplicationControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationController} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ReplicationController
     * @param {String} name name of the ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedReplicationControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationController}
     */
    this.patchCoreV1NamespacedReplicationController = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedReplicationController";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ReplicationController;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedReplicationControllerStatus operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedReplicationControllerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationController} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified ReplicationController
     * @param {String} name name of the ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedReplicationControllerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationController}
     */
    this.patchCoreV1NamespacedReplicationControllerStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedReplicationControllerStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedReplicationControllerStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedReplicationControllerStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ReplicationController;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedResourceQuota operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedResourceQuotaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuota} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ResourceQuota
     * @param {String} name name of the ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedResourceQuotaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuota}
     */
    this.patchCoreV1NamespacedResourceQuota = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedResourceQuota";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ResourceQuota;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedResourceQuotaStatus operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedResourceQuotaStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuota} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified ResourceQuota
     * @param {String} name name of the ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedResourceQuotaStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuota}
     */
    this.patchCoreV1NamespacedResourceQuotaStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedResourceQuotaStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedResourceQuotaStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedResourceQuotaStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ResourceQuota;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedScaleScale operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedScaleScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedScaleScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Scale}
     */
    this.patchCoreV1NamespacedScaleScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedScaleScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedScaleScale";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedScaleScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Scale;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedSecret operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Secret
     * @param {String} name name of the Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Secret}
     */
    this.patchCoreV1NamespacedSecret = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedSecret";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedSecret";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedSecret";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Secret;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/secrets/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedService operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Service}
     */
    this.patchCoreV1NamespacedService = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedService";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Service;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedServiceAccount operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedServiceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ServiceAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ServiceAccount
     * @param {String} name name of the ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedServiceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ServiceAccount}
     */
    this.patchCoreV1NamespacedServiceAccount = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedServiceAccount";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ServiceAccount;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/serviceaccounts/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NamespacedServiceStatus operation.
     * @callback module:api/CorevApi~patchCoreV1NamespacedServiceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NamespacedServiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Service}
     */
    this.patchCoreV1NamespacedServiceStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NamespacedServiceStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchCoreV1NamespacedServiceStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NamespacedServiceStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Service;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1Node operation.
     * @callback module:api/CorevApi~patchCoreV1NodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Node
     * @param {String} name name of the Node
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Node}
     */
    this.patchCoreV1Node = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1Node";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1Node";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Node;

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1NodeStatus operation.
     * @callback module:api/CorevApi~patchCoreV1NodeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Node
     * @param {String} name name of the Node
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1NodeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Node}
     */
    this.patchCoreV1NodeStatus = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1NodeStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1NodeStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Node;

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1PersistentVolume operation.
     * @callback module:api/CorevApi~patchCoreV1PersistentVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified PersistentVolume
     * @param {String} name name of the PersistentVolume
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1PersistentVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolume}
     */
    this.patchCoreV1PersistentVolume = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1PersistentVolume";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1PersistentVolume";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolume;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCoreV1PersistentVolumeStatus operation.
     * @callback module:api/CorevApi~patchCoreV1PersistentVolumeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified PersistentVolume
     * @param {String} name name of the PersistentVolume
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~patchCoreV1PersistentVolumeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolume}
     */
    this.patchCoreV1PersistentVolumeStatus = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchCoreV1PersistentVolumeStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchCoreV1PersistentVolumeStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolume;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1DELETENamespacedPod operation.
     * @callback module:api/CorevApi~proxyCoreV1DELETENamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy DELETE requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1DELETENamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1DELETENamespacedPod = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1DELETENamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1DELETENamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1DELETENamespacedPodWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1DELETENamespacedPodWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy DELETE requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1DELETENamespacedPodWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1DELETENamespacedPodWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1DELETENamespacedPodWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1DELETENamespacedPodWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1DELETENamespacedPodWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1DELETENamespacedService operation.
     * @callback module:api/CorevApi~proxyCoreV1DELETENamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy DELETE requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1DELETENamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1DELETENamespacedService = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1DELETENamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1DELETENamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1DELETENamespacedServiceWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1DELETENamespacedServiceWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy DELETE requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1DELETENamespacedServiceWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1DELETENamespacedServiceWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1DELETENamespacedServiceWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1DELETENamespacedServiceWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1DELETENamespacedServiceWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1DELETENode operation.
     * @callback module:api/CorevApi~proxyCoreV1DELETENodeCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy DELETE requests to Node
     * @param {String} name name of the Node
     * @param {module:api/CorevApi~proxyCoreV1DELETENodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1DELETENode = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1DELETENode";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1DELETENodeWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1DELETENodeWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy DELETE requests to Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1DELETENodeWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1DELETENodeWithPath = function(name, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1DELETENodeWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1DELETENodeWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1GETNamespacedPod operation.
     * @callback module:api/CorevApi~proxyCoreV1GETNamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy GET requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1GETNamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1GETNamespacedPod = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1GETNamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1GETNamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1GETNamespacedPodWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1GETNamespacedPodWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy GET requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1GETNamespacedPodWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1GETNamespacedPodWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1GETNamespacedPodWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1GETNamespacedPodWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1GETNamespacedPodWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1GETNamespacedService operation.
     * @callback module:api/CorevApi~proxyCoreV1GETNamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy GET requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1GETNamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1GETNamespacedService = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1GETNamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1GETNamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1GETNamespacedServiceWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1GETNamespacedServiceWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy GET requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1GETNamespacedServiceWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1GETNamespacedServiceWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1GETNamespacedServiceWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1GETNamespacedServiceWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1GETNamespacedServiceWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1GETNode operation.
     * @callback module:api/CorevApi~proxyCoreV1GETNodeCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy GET requests to Node
     * @param {String} name name of the Node
     * @param {module:api/CorevApi~proxyCoreV1GETNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1GETNode = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1GETNode";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1GETNodeWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1GETNodeWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy GET requests to Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1GETNodeWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1GETNodeWithPath = function(name, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1GETNodeWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1GETNodeWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1HEADNamespacedPod operation.
     * @callback module:api/CorevApi~proxyCoreV1HEADNamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy HEAD requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1HEADNamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1HEADNamespacedPod = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1HEADNamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1HEADNamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1HEADNamespacedPodWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1HEADNamespacedPodWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy HEAD requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1HEADNamespacedPodWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1HEADNamespacedPodWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1HEADNamespacedPodWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1HEADNamespacedPodWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1HEADNamespacedPodWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1HEADNamespacedService operation.
     * @callback module:api/CorevApi~proxyCoreV1HEADNamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy HEAD requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1HEADNamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1HEADNamespacedService = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1HEADNamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1HEADNamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1HEADNamespacedServiceWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1HEADNamespacedServiceWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy HEAD requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1HEADNamespacedServiceWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1HEADNamespacedServiceWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1HEADNamespacedServiceWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1HEADNamespacedServiceWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1HEADNamespacedServiceWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1HEADNode operation.
     * @callback module:api/CorevApi~proxyCoreV1HEADNodeCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy HEAD requests to Node
     * @param {String} name name of the Node
     * @param {module:api/CorevApi~proxyCoreV1HEADNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1HEADNode = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1HEADNode";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1HEADNodeWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1HEADNodeWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy HEAD requests to Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1HEADNodeWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1HEADNodeWithPath = function(name, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1HEADNodeWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1HEADNodeWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}/{path}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1OPTIONSNamespacedPod operation.
     * @callback module:api/CorevApi~proxyCoreV1OPTIONSNamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy OPTIONS requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1OPTIONSNamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1OPTIONSNamespacedPod = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1OPTIONSNamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1OPTIONSNamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1OPTIONSNamespacedPodWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1OPTIONSNamespacedPodWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy OPTIONS requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1OPTIONSNamespacedPodWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1OPTIONSNamespacedPodWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1OPTIONSNamespacedPodWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1OPTIONSNamespacedPodWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1OPTIONSNamespacedPodWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1OPTIONSNamespacedService operation.
     * @callback module:api/CorevApi~proxyCoreV1OPTIONSNamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy OPTIONS requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1OPTIONSNamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1OPTIONSNamespacedService = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1OPTIONSNamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1OPTIONSNamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1OPTIONSNamespacedServiceWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1OPTIONSNamespacedServiceWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy OPTIONS requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1OPTIONSNamespacedServiceWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1OPTIONSNamespacedServiceWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1OPTIONSNamespacedServiceWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1OPTIONSNamespacedServiceWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1OPTIONSNamespacedServiceWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1OPTIONSNode operation.
     * @callback module:api/CorevApi~proxyCoreV1OPTIONSNodeCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy OPTIONS requests to Node
     * @param {String} name name of the Node
     * @param {module:api/CorevApi~proxyCoreV1OPTIONSNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1OPTIONSNode = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1OPTIONSNode";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1OPTIONSNodeWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1OPTIONSNodeWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy OPTIONS requests to Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1OPTIONSNodeWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1OPTIONSNodeWithPath = function(name, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1OPTIONSNodeWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1OPTIONSNodeWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}/{path}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1POSTNamespacedPod operation.
     * @callback module:api/CorevApi~proxyCoreV1POSTNamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy POST requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1POSTNamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1POSTNamespacedPod = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1POSTNamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1POSTNamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1POSTNamespacedPodWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1POSTNamespacedPodWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy POST requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1POSTNamespacedPodWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1POSTNamespacedPodWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1POSTNamespacedPodWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1POSTNamespacedPodWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1POSTNamespacedPodWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1POSTNamespacedService operation.
     * @callback module:api/CorevApi~proxyCoreV1POSTNamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy POST requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1POSTNamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1POSTNamespacedService = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1POSTNamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1POSTNamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1POSTNamespacedServiceWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1POSTNamespacedServiceWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy POST requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1POSTNamespacedServiceWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1POSTNamespacedServiceWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1POSTNamespacedServiceWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1POSTNamespacedServiceWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1POSTNamespacedServiceWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1POSTNode operation.
     * @callback module:api/CorevApi~proxyCoreV1POSTNodeCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy POST requests to Node
     * @param {String} name name of the Node
     * @param {module:api/CorevApi~proxyCoreV1POSTNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1POSTNode = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1POSTNode";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1POSTNodeWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1POSTNodeWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy POST requests to Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1POSTNodeWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1POSTNodeWithPath = function(name, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1POSTNodeWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1POSTNodeWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1PUTNamespacedPod operation.
     * @callback module:api/CorevApi~proxyCoreV1PUTNamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy PUT requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1PUTNamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1PUTNamespacedPod = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1PUTNamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1PUTNamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1PUTNamespacedPodWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1PUTNamespacedPodWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy PUT requests to Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1PUTNamespacedPodWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1PUTNamespacedPodWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1PUTNamespacedPodWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1PUTNamespacedPodWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1PUTNamespacedPodWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1PUTNamespacedService operation.
     * @callback module:api/CorevApi~proxyCoreV1PUTNamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy PUT requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:api/CorevApi~proxyCoreV1PUTNamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1PUTNamespacedService = function(name, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1PUTNamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1PUTNamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1PUTNamespacedServiceWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1PUTNamespacedServiceWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy PUT requests to Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1PUTNamespacedServiceWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1PUTNamespacedServiceWithPath = function(name, namespace, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1PUTNamespacedServiceWithPath";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling proxyCoreV1PUTNamespacedServiceWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1PUTNamespacedServiceWithPath";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1PUTNode operation.
     * @callback module:api/CorevApi~proxyCoreV1PUTNodeCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy PUT requests to Node
     * @param {String} name name of the Node
     * @param {module:api/CorevApi~proxyCoreV1PUTNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1PUTNode = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1PUTNode";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyCoreV1PUTNodeWithPath operation.
     * @callback module:api/CorevApi~proxyCoreV1PUTNodeWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxy PUT requests to Node
     * @param {String} name name of the Node
     * @param {String} path path to the resource
     * @param {module:api/CorevApi~proxyCoreV1PUTNodeWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.proxyCoreV1PUTNodeWithPath = function(name, path, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling proxyCoreV1PUTNodeWithPath";
      }

      // verify the required parameter 'path' is set
      if (path == undefined || path == null) {
        throw "Missing the required parameter 'path' when calling proxyCoreV1PUTNodeWithPath";
      }


      var pathParams = {
        'name': name,
        'path': path
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/proxy/nodes/{name}/{path}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1ComponentStatus operation.
     * @callback module:api/CorevApi~readCoreV1ComponentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ComponentStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ComponentStatus
     * @param {String} name name of the ComponentStatus
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1ComponentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ComponentStatus}
     */
    this.readCoreV1ComponentStatus = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1ComponentStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ComponentStatus;

      return this.apiClient.callApi(
        '/api/v1/componentstatuses/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1Namespace operation.
     * @callback module:api/CorevApi~readCoreV1NamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Namespace
     * @param {String} name name of the Namespace
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Namespace}
     */
    this.readCoreV1Namespace = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1Namespace";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Namespace;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespaceStatus operation.
     * @callback module:api/CorevApi~readCoreV1NamespaceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Namespace
     * @param {String} name name of the Namespace
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1NamespaceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Namespace}
     */
    this.readCoreV1NamespaceStatus = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespaceStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Namespace;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedConfigMap operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedConfigMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ConfigMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ConfigMap
     * @param {String} name name of the ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedConfigMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ConfigMap}
     */
    this.readCoreV1NamespacedConfigMap = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedConfigMap";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ConfigMap;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/configmaps/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedEndpoints operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Endpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Endpoints
     * @param {String} name name of the Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Endpoints}
     */
    this.readCoreV1NamespacedEndpoints = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedEndpoints";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Endpoints;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/endpoints/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedEvent operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Event
     * @param {String} name name of the Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Event}
     */
    this.readCoreV1NamespacedEvent = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedEvent";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedEvent";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Event;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/events/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedLimitRange operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedLimitRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LimitRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified LimitRange
     * @param {String} name name of the LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedLimitRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LimitRange}
     */
    this.readCoreV1NamespacedLimitRange = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedLimitRange";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1LimitRange;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/limitranges/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedPersistentVolumeClaim operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedPersistentVolumeClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified PersistentVolumeClaim
     * @param {String} name name of the PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedPersistentVolumeClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaim}
     */
    this.readCoreV1NamespacedPersistentVolumeClaim = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedPersistentVolumeClaim";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolumeClaim;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedPersistentVolumeClaimStatus operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedPersistentVolumeClaimStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified PersistentVolumeClaim
     * @param {String} name name of the PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1NamespacedPersistentVolumeClaimStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaim}
     */
    this.readCoreV1NamespacedPersistentVolumeClaimStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedPersistentVolumeClaimStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedPersistentVolumeClaimStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolumeClaim;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedPod operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Pod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Pod}
     */
    this.readCoreV1NamespacedPod = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Pod;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedPodLog operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedPodLogCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read log of the specified Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.container The container for which to stream logs. Defaults to only container if there is one container in the pod.
     * @param {Boolean} opts.follow Follow the log stream of the pod. Defaults to false.
     * @param {Integer} opts.limitBytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.previous Return previous terminated container logs. Defaults to false.
     * @param {Integer} opts.sinceSeconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
     * @param {String} opts.sinceTime An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
     * @param {Integer} opts.tailLines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
     * @param {Boolean} opts.timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
     * @param {module:api/CorevApi~readCoreV1NamespacedPodLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.readCoreV1NamespacedPodLog = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedPodLog";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedPodLog";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'container': opts['container'],
        'follow': opts['follow'],
        'limitBytes': opts['limitBytes'],
        'pretty': opts['pretty'],
        'previous': opts['previous'],
        'sinceSeconds': opts['sinceSeconds'],
        'sinceTime': opts['sinceTime'],
        'tailLines': opts['tailLines'],
        'timestamps': opts['timestamps']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain', 'application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedPodStatus operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedPodStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Pod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1NamespacedPodStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Pod}
     */
    this.readCoreV1NamespacedPodStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedPodStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedPodStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Pod;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedPodTemplate operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedPodTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PodTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified PodTemplate
     * @param {String} name name of the PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedPodTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PodTemplate}
     */
    this.readCoreV1NamespacedPodTemplate = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedPodTemplate";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PodTemplate;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/podtemplates/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedReplicationController operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedReplicationControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationController} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ReplicationController
     * @param {String} name name of the ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedReplicationControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationController}
     */
    this.readCoreV1NamespacedReplicationController = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedReplicationController";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ReplicationController;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedReplicationControllerStatus operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedReplicationControllerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationController} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified ReplicationController
     * @param {String} name name of the ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1NamespacedReplicationControllerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationController}
     */
    this.readCoreV1NamespacedReplicationControllerStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedReplicationControllerStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedReplicationControllerStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ReplicationController;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedResourceQuota operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedResourceQuotaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuota} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ResourceQuota
     * @param {String} name name of the ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedResourceQuotaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuota}
     */
    this.readCoreV1NamespacedResourceQuota = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedResourceQuota";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ResourceQuota;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedResourceQuotaStatus operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedResourceQuotaStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuota} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified ResourceQuota
     * @param {String} name name of the ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1NamespacedResourceQuotaStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuota}
     */
    this.readCoreV1NamespacedResourceQuotaStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedResourceQuotaStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedResourceQuotaStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ResourceQuota;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedScaleScale operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedScaleScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1NamespacedScaleScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Scale}
     */
    this.readCoreV1NamespacedScaleScale = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedScaleScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedScaleScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Scale;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedSecret operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Secret
     * @param {String} name name of the Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Secret}
     */
    this.readCoreV1NamespacedSecret = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedSecret";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedSecret";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Secret;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/secrets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedService operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Service}
     */
    this.readCoreV1NamespacedService = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Service;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedServiceAccount operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedServiceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ServiceAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ServiceAccount
     * @param {String} name name of the ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NamespacedServiceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ServiceAccount}
     */
    this.readCoreV1NamespacedServiceAccount = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedServiceAccount";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ServiceAccount;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/serviceaccounts/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NamespacedServiceStatus operation.
     * @callback module:api/CorevApi~readCoreV1NamespacedServiceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1NamespacedServiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Service}
     */
    this.readCoreV1NamespacedServiceStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NamespacedServiceStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readCoreV1NamespacedServiceStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Service;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1Node operation.
     * @callback module:api/CorevApi~readCoreV1NodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1NodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Node}
     */
    this.readCoreV1Node = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1Node";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Node;

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1NodeStatus operation.
     * @callback module:api/CorevApi~readCoreV1NodeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1NodeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Node}
     */
    this.readCoreV1NodeStatus = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1NodeStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Node;

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1PersistentVolume operation.
     * @callback module:api/CorevApi~readCoreV1PersistentVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified PersistentVolume
     * @param {String} name name of the PersistentVolume
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/CorevApi~readCoreV1PersistentVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolume}
     */
    this.readCoreV1PersistentVolume = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1PersistentVolume";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolume;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readCoreV1PersistentVolumeStatus operation.
     * @callback module:api/CorevApi~readCoreV1PersistentVolumeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified PersistentVolume
     * @param {String} name name of the PersistentVolume
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~readCoreV1PersistentVolumeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolume}
     */
    this.readCoreV1PersistentVolumeStatus = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readCoreV1PersistentVolumeStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolume;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1Namespace operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Namespace
     * @param {String} name name of the Namespace
     * @param {module:model/V1Namespace} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Namespace}
     */
    this.replaceCoreV1Namespace = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1Namespace";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1Namespace";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Namespace;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespaceFinalize operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespaceFinalizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace finalize of the specified Namespace
     * @param {module:model/V1Namespace} body 
     * @param {String} name name of the Namespace
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespaceFinalizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Namespace}
     */
    this.replaceCoreV1NamespaceFinalize = function(body, name, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespaceFinalize";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespaceFinalize";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Namespace;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{name}/finalize', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespaceStatus operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespaceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Namespace
     * @param {String} name name of the Namespace
     * @param {module:model/V1Namespace} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespaceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Namespace}
     */
    this.replaceCoreV1NamespaceStatus = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespaceStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespaceStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Namespace;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedConfigMap operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedConfigMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ConfigMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ConfigMap
     * @param {String} name name of the ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ConfigMap} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedConfigMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ConfigMap}
     */
    this.replaceCoreV1NamespacedConfigMap = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedConfigMap";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ConfigMap;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/configmaps/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedEndpoints operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Endpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Endpoints
     * @param {String} name name of the Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Endpoints} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Endpoints}
     */
    this.replaceCoreV1NamespacedEndpoints = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedEndpoints";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Endpoints;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/endpoints/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedEvent operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Event
     * @param {String} name name of the Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Event} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Event}
     */
    this.replaceCoreV1NamespacedEvent = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedEvent";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedEvent";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedEvent";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Event;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/events/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedLimitRange operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedLimitRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LimitRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified LimitRange
     * @param {String} name name of the LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1LimitRange} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedLimitRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LimitRange}
     */
    this.replaceCoreV1NamespacedLimitRange = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedLimitRange";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1LimitRange;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/limitranges/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedPersistentVolumeClaim operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedPersistentVolumeClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified PersistentVolumeClaim
     * @param {String} name name of the PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1PersistentVolumeClaim} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedPersistentVolumeClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaim}
     */
    this.replaceCoreV1NamespacedPersistentVolumeClaim = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedPersistentVolumeClaim";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolumeClaim;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedPersistentVolumeClaimStatus operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedPersistentVolumeClaimStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolumeClaim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified PersistentVolumeClaim
     * @param {String} name name of the PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1PersistentVolumeClaim} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedPersistentVolumeClaimStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolumeClaim}
     */
    this.replaceCoreV1NamespacedPersistentVolumeClaimStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedPersistentVolumeClaimStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedPersistentVolumeClaimStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedPersistentVolumeClaimStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolumeClaim;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedPod operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Pod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Pod} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Pod}
     */
    this.replaceCoreV1NamespacedPod = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedPod";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Pod;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedPodStatus operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedPodStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Pod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Pod} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedPodStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Pod}
     */
    this.replaceCoreV1NamespacedPodStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedPodStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedPodStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedPodStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Pod;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/pods/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedPodTemplate operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedPodTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PodTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified PodTemplate
     * @param {String} name name of the PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1PodTemplate} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedPodTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PodTemplate}
     */
    this.replaceCoreV1NamespacedPodTemplate = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedPodTemplate";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PodTemplate;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/podtemplates/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedReplicationController operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedReplicationControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationController} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ReplicationController
     * @param {String} name name of the ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ReplicationController} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedReplicationControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationController}
     */
    this.replaceCoreV1NamespacedReplicationController = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedReplicationController";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ReplicationController;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedReplicationControllerStatus operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedReplicationControllerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ReplicationController} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified ReplicationController
     * @param {String} name name of the ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ReplicationController} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedReplicationControllerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ReplicationController}
     */
    this.replaceCoreV1NamespacedReplicationControllerStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedReplicationControllerStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedReplicationControllerStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedReplicationControllerStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ReplicationController;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedResourceQuota operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedResourceQuotaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuota} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ResourceQuota
     * @param {String} name name of the ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ResourceQuota} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedResourceQuotaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuota}
     */
    this.replaceCoreV1NamespacedResourceQuota = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedResourceQuota";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ResourceQuota;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedResourceQuotaStatus operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedResourceQuotaStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ResourceQuota} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified ResourceQuota
     * @param {String} name name of the ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ResourceQuota} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedResourceQuotaStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ResourceQuota}
     */
    this.replaceCoreV1NamespacedResourceQuotaStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedResourceQuotaStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedResourceQuotaStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedResourceQuotaStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ResourceQuota;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedScaleScale operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedScaleScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Scale} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedScaleScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Scale}
     */
    this.replaceCoreV1NamespacedScaleScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedScaleScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedScaleScale";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedScaleScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Scale;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedSecret operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Secret
     * @param {String} name name of the Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Secret} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Secret}
     */
    this.replaceCoreV1NamespacedSecret = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedSecret";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedSecret";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedSecret";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Secret;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/secrets/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedService operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Service} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Service}
     */
    this.replaceCoreV1NamespacedService = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedService";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Service;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedServiceAccount operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedServiceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ServiceAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ServiceAccount
     * @param {String} name name of the ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1ServiceAccount} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedServiceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ServiceAccount}
     */
    this.replaceCoreV1NamespacedServiceAccount = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedServiceAccount";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1ServiceAccount;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/serviceaccounts/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NamespacedServiceStatus operation.
     * @callback module:api/CorevApi~replaceCoreV1NamespacedServiceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Service} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NamespacedServiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Service}
     */
    this.replaceCoreV1NamespacedServiceStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NamespacedServiceStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceCoreV1NamespacedServiceStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NamespacedServiceStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Service;

      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace}/services/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1Node operation.
     * @callback module:api/CorevApi~replaceCoreV1NodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Node
     * @param {String} name name of the Node
     * @param {module:model/V1Node} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Node}
     */
    this.replaceCoreV1Node = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1Node";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1Node";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Node;

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1NodeStatus operation.
     * @callback module:api/CorevApi~replaceCoreV1NodeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Node
     * @param {String} name name of the Node
     * @param {module:model/V1Node} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1NodeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Node}
     */
    this.replaceCoreV1NodeStatus = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1NodeStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1NodeStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Node;

      return this.apiClient.callApi(
        '/api/v1/nodes/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1PersistentVolume operation.
     * @callback module:api/CorevApi~replaceCoreV1PersistentVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified PersistentVolume
     * @param {String} name name of the PersistentVolume
     * @param {module:model/V1PersistentVolume} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1PersistentVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolume}
     */
    this.replaceCoreV1PersistentVolume = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1PersistentVolume";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1PersistentVolume";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolume;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceCoreV1PersistentVolumeStatus operation.
     * @callback module:api/CorevApi~replaceCoreV1PersistentVolumeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PersistentVolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified PersistentVolume
     * @param {String} name name of the PersistentVolume
     * @param {module:model/V1PersistentVolume} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/CorevApi~replaceCoreV1PersistentVolumeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PersistentVolume}
     */
    this.replaceCoreV1PersistentVolumeStatus = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceCoreV1PersistentVolumeStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceCoreV1PersistentVolumeStatus";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1PersistentVolume;

      return this.apiClient.callApi(
        '/api/v1/persistentvolumes/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1ConfigMapListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1ConfigMapListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ConfigMap
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1ConfigMapListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1ConfigMapListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/configmaps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1EndpointsListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1EndpointsListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Endpoints
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1EndpointsListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1EndpointsListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1EventListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1EventListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Event
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1EventListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1EventListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1LimitRangeListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1LimitRangeListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of LimitRange
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1LimitRangeListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1LimitRangeListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/limitranges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1Namespace operation.
     * @callback module:api/CorevApi~watchCoreV1NamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Namespace
     * @param {String} name name of the Namespace
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1Namespace = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1Namespace";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespaceList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespaceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Namespace
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespaceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespaceList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedConfigMap operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedConfigMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ConfigMap
     * @param {String} name name of the ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedConfigMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedConfigMap = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedConfigMap";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedConfigMap";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/configmaps/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedConfigMapList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedConfigMapListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ConfigMap
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedConfigMapListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedConfigMapList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedConfigMapList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/configmaps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedEndpoints operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Endpoints
     * @param {String} name name of the Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedEndpoints = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedEndpoints";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedEndpoints";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/endpoints/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedEndpointsList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedEndpointsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Endpoints
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedEndpointsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedEndpointsList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedEndpointsList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedEvent operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Event
     * @param {String} name name of the Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedEvent = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedEvent";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedEvent";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/events/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedEventList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedEventListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Event
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedEventListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedEventList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedEventList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedLimitRange operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedLimitRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind LimitRange
     * @param {String} name name of the LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedLimitRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedLimitRange = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedLimitRange";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedLimitRange";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/limitranges/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedLimitRangeList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedLimitRangeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of LimitRange
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedLimitRangeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedLimitRangeList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedLimitRangeList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/limitranges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedPersistentVolumeClaim operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedPersistentVolumeClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind PersistentVolumeClaim
     * @param {String} name name of the PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedPersistentVolumeClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedPersistentVolumeClaim = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedPersistentVolumeClaim";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedPersistentVolumeClaim";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedPersistentVolumeClaimList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedPersistentVolumeClaimListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of PersistentVolumeClaim
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedPersistentVolumeClaimListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedPersistentVolumeClaimList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedPersistentVolumeClaimList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedPod operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Pod
     * @param {String} name name of the Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedPod = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedPod";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedPod";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/pods/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedPodList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedPodListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Pod
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedPodListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedPodList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedPodList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/pods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedPodTemplate operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedPodTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind PodTemplate
     * @param {String} name name of the PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedPodTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedPodTemplate = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedPodTemplate";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedPodTemplate";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/podtemplates/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedPodTemplateList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedPodTemplateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of PodTemplate
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedPodTemplateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedPodTemplateList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedPodTemplateList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/podtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedReplicationController operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedReplicationControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ReplicationController
     * @param {String} name name of the ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedReplicationControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedReplicationController = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedReplicationController";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedReplicationController";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedReplicationControllerList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedReplicationControllerListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ReplicationController
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedReplicationControllerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedReplicationControllerList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedReplicationControllerList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/replicationcontrollers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedResourceQuota operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedResourceQuotaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ResourceQuota
     * @param {String} name name of the ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedResourceQuotaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedResourceQuota = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedResourceQuota";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedResourceQuota";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedResourceQuotaList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedResourceQuotaListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ResourceQuota
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedResourceQuotaListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedResourceQuotaList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedResourceQuotaList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/resourcequotas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedSecret operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Secret
     * @param {String} name name of the Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedSecret = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedSecret";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedSecret";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/secrets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedSecretList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedSecretListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Secret
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedSecretListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedSecretList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedSecretList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedService operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Service
     * @param {String} name name of the Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedService = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedService";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedService";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/services/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedServiceAccount operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedServiceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ServiceAccount
     * @param {String} name name of the ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedServiceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedServiceAccount = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1NamespacedServiceAccount";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedServiceAccount";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedServiceAccountList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedServiceAccountListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ServiceAccount
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedServiceAccountListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedServiceAccountList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedServiceAccountList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/serviceaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NamespacedServiceList operation.
     * @callback module:api/CorevApi~watchCoreV1NamespacedServiceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Service
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NamespacedServiceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NamespacedServiceList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchCoreV1NamespacedServiceList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/namespaces/{namespace}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1Node operation.
     * @callback module:api/CorevApi~watchCoreV1NodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Node
     * @param {String} name name of the Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1Node = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1Node";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/nodes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1NodeList operation.
     * @callback module:api/CorevApi~watchCoreV1NodeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Node
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1NodeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1NodeList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1PersistentVolume operation.
     * @callback module:api/CorevApi~watchCoreV1PersistentVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind PersistentVolume
     * @param {String} name name of the PersistentVolume
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1PersistentVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1PersistentVolume = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchCoreV1PersistentVolume";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/persistentvolumes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1PersistentVolumeClaimListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1PersistentVolumeClaimListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of PersistentVolumeClaim
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1PersistentVolumeClaimListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1PersistentVolumeClaimListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/persistentvolumeclaims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1PersistentVolumeList operation.
     * @callback module:api/CorevApi~watchCoreV1PersistentVolumeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of PersistentVolume
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1PersistentVolumeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1PersistentVolumeList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/persistentvolumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1PodListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1PodListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Pod
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1PodListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1PodListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/pods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1PodTemplateListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1PodTemplateListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of PodTemplate
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1PodTemplateListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1PodTemplateListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/podtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1ReplicationControllerListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1ReplicationControllerListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ReplicationController
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1ReplicationControllerListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1ReplicationControllerListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/replicationcontrollers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1ResourceQuotaListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1ResourceQuotaListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ResourceQuota
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1ResourceQuotaListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1ResourceQuotaListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/resourcequotas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1SecretListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1SecretListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Secret
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1SecretListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1SecretListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1ServiceAccountListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1ServiceAccountListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ServiceAccount
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1ServiceAccountListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1ServiceAccountListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/serviceaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchCoreV1ServiceListForAllNamespaces operation.
     * @callback module:api/CorevApi~watchCoreV1ServiceListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Service
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/CorevApi~watchCoreV1ServiceListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchCoreV1ServiceListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/api/v1/watch/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
