/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: unversioned
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V2alpha1CronJob', 'model/V2alpha1Job', 'model/UnversionedStatus', 'model/V1DeleteOptions', 'model/UnversionedAPIResourceList', 'model/V2alpha1CronJobList', 'model/V2alpha1JobList', 'model/UnversionedPatch', 'model/VersionedEvent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V2alpha1CronJob'), require('../model/V2alpha1Job'), require('../model/UnversionedStatus'), require('../model/V1DeleteOptions'), require('../model/UnversionedAPIResourceList'), require('../model/V2alpha1CronJobList'), require('../model/V2alpha1JobList'), require('../model/UnversionedPatch'), require('../model/VersionedEvent'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.BatchvalphaApi = factory(root.Kubernetes.ApiClient, root.Kubernetes.V2alpha1CronJob, root.Kubernetes.V2alpha1Job, root.Kubernetes.UnversionedStatus, root.Kubernetes.V1DeleteOptions, root.Kubernetes.UnversionedAPIResourceList, root.Kubernetes.V2alpha1CronJobList, root.Kubernetes.V2alpha1JobList, root.Kubernetes.UnversionedPatch, root.Kubernetes.VersionedEvent);
  }
}(this, function(ApiClient, V2alpha1CronJob, V2alpha1Job, UnversionedStatus, V1DeleteOptions, UnversionedAPIResourceList, V2alpha1CronJobList, V2alpha1JobList, UnversionedPatch, VersionedEvent) {
  'use strict';

  /**
   * Batchvalpha service.
   * @module api/BatchvalphaApi
   * @version unversioned
   */

  /**
   * Constructs a new BatchvalphaApi. 
   * @alias module:api/BatchvalphaApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBatchV2alpha1NamespacedCronJob operation.
     * @callback module:api/BatchvalphaApi~createBatchV2alpha1NamespacedCronJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1CronJob} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~createBatchV2alpha1NamespacedCronJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.createBatchV2alpha1NamespacedCronJob = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createBatchV2alpha1NamespacedCronJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBatchV2alpha1NamespacedJob operation.
     * @callback module:api/BatchvalphaApi~createBatchV2alpha1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1Job} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~createBatchV2alpha1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1Job}
     */
    this.createBatchV2alpha1NamespacedJob = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createBatchV2alpha1NamespacedJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1Job;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBatchV2alpha1NamespacedScheduledJob operation.
     * @callback module:api/BatchvalphaApi~createBatchV2alpha1NamespacedScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1CronJob} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~createBatchV2alpha1NamespacedScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.createBatchV2alpha1NamespacedScheduledJob = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createBatchV2alpha1NamespacedScheduledJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatchV2alpha1CollectionNamespacedCronJob operation.
     * @callback module:api/BatchvalphaApi~deleteBatchV2alpha1CollectionNamespacedCronJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~deleteBatchV2alpha1CollectionNamespacedCronJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteBatchV2alpha1CollectionNamespacedCronJob = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteBatchV2alpha1CollectionNamespacedCronJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatchV2alpha1CollectionNamespacedJob operation.
     * @callback module:api/BatchvalphaApi~deleteBatchV2alpha1CollectionNamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~deleteBatchV2alpha1CollectionNamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteBatchV2alpha1CollectionNamespacedJob = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteBatchV2alpha1CollectionNamespacedJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatchV2alpha1CollectionNamespacedScheduledJob operation.
     * @callback module:api/BatchvalphaApi~deleteBatchV2alpha1CollectionNamespacedScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~deleteBatchV2alpha1CollectionNamespacedScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteBatchV2alpha1CollectionNamespacedScheduledJob = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteBatchV2alpha1CollectionNamespacedScheduledJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatchV2alpha1NamespacedCronJob operation.
     * @callback module:api/BatchvalphaApi~deleteBatchV2alpha1NamespacedCronJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a CronJob
     * @param {String} name name of the CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/BatchvalphaApi~deleteBatchV2alpha1NamespacedCronJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteBatchV2alpha1NamespacedCronJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteBatchV2alpha1NamespacedCronJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatchV2alpha1NamespacedJob operation.
     * @callback module:api/BatchvalphaApi~deleteBatchV2alpha1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/BatchvalphaApi~deleteBatchV2alpha1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteBatchV2alpha1NamespacedJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteBatchV2alpha1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatchV2alpha1NamespacedScheduledJob operation.
     * @callback module:api/BatchvalphaApi~deleteBatchV2alpha1NamespacedScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ScheduledJob
     * @param {String} name name of the ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/BatchvalphaApi~deleteBatchV2alpha1NamespacedScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteBatchV2alpha1NamespacedScheduledJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteBatchV2alpha1NamespacedScheduledJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchV2alpha1APIResources operation.
     * @callback module:api/BatchvalphaApi~getBatchV2alpha1APIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedAPIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:api/BatchvalphaApi~getBatchV2alpha1APIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedAPIResourceList}
     */
    this.getBatchV2alpha1APIResources = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedAPIResourceList;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchV2alpha1CronJobForAllNamespaces operation.
     * @callback module:api/BatchvalphaApi~listBatchV2alpha1CronJobForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind CronJob
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~listBatchV2alpha1CronJobForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJobList}
     */
    this.listBatchV2alpha1CronJobForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V2alpha1CronJobList;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/cronjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchV2alpha1JobForAllNamespaces operation.
     * @callback module:api/BatchvalphaApi~listBatchV2alpha1JobForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1JobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Job
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~listBatchV2alpha1JobForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1JobList}
     */
    this.listBatchV2alpha1JobForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V2alpha1JobList;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchV2alpha1NamespacedCronJob operation.
     * @callback module:api/BatchvalphaApi~listBatchV2alpha1NamespacedCronJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~listBatchV2alpha1NamespacedCronJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJobList}
     */
    this.listBatchV2alpha1NamespacedCronJob = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listBatchV2alpha1NamespacedCronJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V2alpha1CronJobList;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchV2alpha1NamespacedJob operation.
     * @callback module:api/BatchvalphaApi~listBatchV2alpha1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1JobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~listBatchV2alpha1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1JobList}
     */
    this.listBatchV2alpha1NamespacedJob = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listBatchV2alpha1NamespacedJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V2alpha1JobList;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchV2alpha1NamespacedScheduledJob operation.
     * @callback module:api/BatchvalphaApi~listBatchV2alpha1NamespacedScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~listBatchV2alpha1NamespacedScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJobList}
     */
    this.listBatchV2alpha1NamespacedScheduledJob = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listBatchV2alpha1NamespacedScheduledJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V2alpha1CronJobList;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchV2alpha1ScheduledJobForAllNamespaces operation.
     * @callback module:api/BatchvalphaApi~listBatchV2alpha1ScheduledJobForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ScheduledJob
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~listBatchV2alpha1ScheduledJobForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJobList}
     */
    this.listBatchV2alpha1ScheduledJobForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V2alpha1CronJobList;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/scheduledjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBatchV2alpha1NamespacedCronJob operation.
     * @callback module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedCronJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified CronJob
     * @param {String} name name of the CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedCronJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.patchBatchV2alpha1NamespacedCronJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchBatchV2alpha1NamespacedCronJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBatchV2alpha1NamespacedCronJobStatus operation.
     * @callback module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedCronJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified CronJob
     * @param {String} name name of the CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedCronJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.patchBatchV2alpha1NamespacedCronJobStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchBatchV2alpha1NamespacedCronJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchBatchV2alpha1NamespacedCronJobStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchBatchV2alpha1NamespacedCronJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBatchV2alpha1NamespacedJob operation.
     * @callback module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1Job}
     */
    this.patchBatchV2alpha1NamespacedJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchBatchV2alpha1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1Job;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBatchV2alpha1NamespacedJobStatus operation.
     * @callback module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1Job}
     */
    this.patchBatchV2alpha1NamespacedJobStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchBatchV2alpha1NamespacedJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchBatchV2alpha1NamespacedJobStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchBatchV2alpha1NamespacedJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1Job;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBatchV2alpha1NamespacedScheduledJob operation.
     * @callback module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ScheduledJob
     * @param {String} name name of the ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.patchBatchV2alpha1NamespacedScheduledJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchBatchV2alpha1NamespacedScheduledJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBatchV2alpha1NamespacedScheduledJobStatus operation.
     * @callback module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedScheduledJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified ScheduledJob
     * @param {String} name name of the ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~patchBatchV2alpha1NamespacedScheduledJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.patchBatchV2alpha1NamespacedScheduledJobStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchBatchV2alpha1NamespacedScheduledJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchBatchV2alpha1NamespacedScheduledJobStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchBatchV2alpha1NamespacedScheduledJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBatchV2alpha1NamespacedCronJob operation.
     * @callback module:api/BatchvalphaApi~readBatchV2alpha1NamespacedCronJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified CronJob
     * @param {String} name name of the CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/BatchvalphaApi~readBatchV2alpha1NamespacedCronJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.readBatchV2alpha1NamespacedCronJob = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readBatchV2alpha1NamespacedCronJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBatchV2alpha1NamespacedCronJobStatus operation.
     * @callback module:api/BatchvalphaApi~readBatchV2alpha1NamespacedCronJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified CronJob
     * @param {String} name name of the CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~readBatchV2alpha1NamespacedCronJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.readBatchV2alpha1NamespacedCronJobStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readBatchV2alpha1NamespacedCronJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readBatchV2alpha1NamespacedCronJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBatchV2alpha1NamespacedJob operation.
     * @callback module:api/BatchvalphaApi~readBatchV2alpha1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/BatchvalphaApi~readBatchV2alpha1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1Job}
     */
    this.readBatchV2alpha1NamespacedJob = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readBatchV2alpha1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1Job;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBatchV2alpha1NamespacedJobStatus operation.
     * @callback module:api/BatchvalphaApi~readBatchV2alpha1NamespacedJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~readBatchV2alpha1NamespacedJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1Job}
     */
    this.readBatchV2alpha1NamespacedJobStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readBatchV2alpha1NamespacedJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readBatchV2alpha1NamespacedJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1Job;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBatchV2alpha1NamespacedScheduledJob operation.
     * @callback module:api/BatchvalphaApi~readBatchV2alpha1NamespacedScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ScheduledJob
     * @param {String} name name of the ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/BatchvalphaApi~readBatchV2alpha1NamespacedScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.readBatchV2alpha1NamespacedScheduledJob = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readBatchV2alpha1NamespacedScheduledJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBatchV2alpha1NamespacedScheduledJobStatus operation.
     * @callback module:api/BatchvalphaApi~readBatchV2alpha1NamespacedScheduledJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified ScheduledJob
     * @param {String} name name of the ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~readBatchV2alpha1NamespacedScheduledJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.readBatchV2alpha1NamespacedScheduledJobStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readBatchV2alpha1NamespacedScheduledJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readBatchV2alpha1NamespacedScheduledJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBatchV2alpha1NamespacedCronJob operation.
     * @callback module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedCronJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified CronJob
     * @param {String} name name of the CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1CronJob} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedCronJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.replaceBatchV2alpha1NamespacedCronJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceBatchV2alpha1NamespacedCronJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBatchV2alpha1NamespacedCronJobStatus operation.
     * @callback module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedCronJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified CronJob
     * @param {String} name name of the CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1CronJob} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedCronJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.replaceBatchV2alpha1NamespacedCronJobStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceBatchV2alpha1NamespacedCronJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceBatchV2alpha1NamespacedCronJobStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceBatchV2alpha1NamespacedCronJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBatchV2alpha1NamespacedJob operation.
     * @callback module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1Job} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1Job}
     */
    this.replaceBatchV2alpha1NamespacedJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceBatchV2alpha1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1Job;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBatchV2alpha1NamespacedJobStatus operation.
     * @callback module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1Job} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1Job}
     */
    this.replaceBatchV2alpha1NamespacedJobStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceBatchV2alpha1NamespacedJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceBatchV2alpha1NamespacedJobStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceBatchV2alpha1NamespacedJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1Job;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBatchV2alpha1NamespacedScheduledJob operation.
     * @callback module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ScheduledJob
     * @param {String} name name of the ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1CronJob} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.replaceBatchV2alpha1NamespacedScheduledJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceBatchV2alpha1NamespacedScheduledJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBatchV2alpha1NamespacedScheduledJobStatus operation.
     * @callback module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedScheduledJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2alpha1CronJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified ScheduledJob
     * @param {String} name name of the ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V2alpha1CronJob} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BatchvalphaApi~replaceBatchV2alpha1NamespacedScheduledJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2alpha1CronJob}
     */
    this.replaceBatchV2alpha1NamespacedScheduledJobStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceBatchV2alpha1NamespacedScheduledJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceBatchV2alpha1NamespacedScheduledJobStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceBatchV2alpha1NamespacedScheduledJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V2alpha1CronJob;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1CronJobListForAllNamespaces operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1CronJobListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of CronJob
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1CronJobListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1CronJobListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/cronjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1JobListForAllNamespaces operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1JobListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Job
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1JobListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1JobListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1NamespacedCronJob operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedCronJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind CronJob
     * @param {String} name name of the CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedCronJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1NamespacedCronJob = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchBatchV2alpha1NamespacedCronJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchBatchV2alpha1NamespacedCronJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1NamespacedCronJobList operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedCronJobListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of CronJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedCronJobListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1NamespacedCronJobList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchBatchV2alpha1NamespacedCronJobList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1NamespacedJob operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1NamespacedJob = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchBatchV2alpha1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchBatchV2alpha1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/namespaces/{namespace}/jobs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1NamespacedJobList operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedJobListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedJobListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1NamespacedJobList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchBatchV2alpha1NamespacedJobList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/namespaces/{namespace}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1NamespacedScheduledJob operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ScheduledJob
     * @param {String} name name of the ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1NamespacedScheduledJob = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchBatchV2alpha1NamespacedScheduledJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchBatchV2alpha1NamespacedScheduledJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/namespaces/{namespace}/scheduledjobs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1NamespacedScheduledJobList operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedScheduledJobListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ScheduledJob
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1NamespacedScheduledJobListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1NamespacedScheduledJobList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchBatchV2alpha1NamespacedScheduledJobList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/namespaces/{namespace}/scheduledjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBatchV2alpha1ScheduledJobListForAllNamespaces operation.
     * @callback module:api/BatchvalphaApi~watchBatchV2alpha1ScheduledJobListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ScheduledJob
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BatchvalphaApi~watchBatchV2alpha1ScheduledJobListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchBatchV2alpha1ScheduledJobListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/batch/v2alpha1/watch/scheduledjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
