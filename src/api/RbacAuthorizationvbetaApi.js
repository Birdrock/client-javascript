/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1beta1ClusterRole', 'model/V1beta1ClusterRoleBinding', 'model/V1beta1Role', 'model/V1beta1RoleBinding', 'model/V1DeleteOptions', 'model/V1Status', 'model/V1APIResourceList', 'model/V1beta1ClusterRoleList', 'model/V1beta1ClusterRoleBindingList', 'model/V1beta1RoleList', 'model/V1beta1RoleBindingList', 'model/V1Patch', 'model/V1WatchEvent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V1beta1ClusterRole'), require('../model/V1beta1ClusterRoleBinding'), require('../model/V1beta1Role'), require('../model/V1beta1RoleBinding'), require('../model/V1DeleteOptions'), require('../model/V1Status'), require('../model/V1APIResourceList'), require('../model/V1beta1ClusterRoleList'), require('../model/V1beta1ClusterRoleBindingList'), require('../model/V1beta1RoleList'), require('../model/V1beta1RoleBindingList'), require('../model/V1Patch'), require('../model/V1WatchEvent'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.RbacAuthorizationvbetaApi = factory(root.Kubernetes.ApiClient, root.Kubernetes.V1beta1ClusterRole, root.Kubernetes.V1beta1ClusterRoleBinding, root.Kubernetes.V1beta1Role, root.Kubernetes.V1beta1RoleBinding, root.Kubernetes.V1DeleteOptions, root.Kubernetes.V1Status, root.Kubernetes.V1APIResourceList, root.Kubernetes.V1beta1ClusterRoleList, root.Kubernetes.V1beta1ClusterRoleBindingList, root.Kubernetes.V1beta1RoleList, root.Kubernetes.V1beta1RoleBindingList, root.Kubernetes.V1Patch, root.Kubernetes.V1WatchEvent);
  }
}(this, function(ApiClient, V1beta1ClusterRole, V1beta1ClusterRoleBinding, V1beta1Role, V1beta1RoleBinding, V1DeleteOptions, V1Status, V1APIResourceList, V1beta1ClusterRoleList, V1beta1ClusterRoleBindingList, V1beta1RoleList, V1beta1RoleBindingList, V1Patch, V1WatchEvent) {
  'use strict';

  /**
   * RbacAuthorizationvbeta service.
   * @module api/RbacAuthorizationvbetaApi
   * @version v1.6.0
   */

  /**
   * Constructs a new RbacAuthorizationvbetaApi. 
   * @alias module:api/RbacAuthorizationvbetaApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRbacAuthorizationV1beta1ClusterRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~createRbacAuthorizationV1beta1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ClusterRole
     * @param {module:model/V1beta1ClusterRole} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~createRbacAuthorizationV1beta1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRole}
     */
    this.createRbacAuthorizationV1beta1ClusterRole = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createRbacAuthorizationV1beta1ClusterRole";
      }


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ClusterRole;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRbacAuthorizationV1beta1ClusterRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~createRbacAuthorizationV1beta1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ClusterRoleBinding
     * @param {module:model/V1beta1ClusterRoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~createRbacAuthorizationV1beta1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRoleBinding}
     */
    this.createRbacAuthorizationV1beta1ClusterRoleBinding = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createRbacAuthorizationV1beta1ClusterRoleBinding";
      }


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ClusterRoleBinding;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRbacAuthorizationV1beta1NamespacedRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~createRbacAuthorizationV1beta1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Role} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~createRbacAuthorizationV1beta1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Role}
     */
    this.createRbacAuthorizationV1beta1NamespacedRole = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createRbacAuthorizationV1beta1NamespacedRole";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Role;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRbacAuthorizationV1beta1NamespacedRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~createRbacAuthorizationV1beta1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1RoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~createRbacAuthorizationV1beta1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1RoleBinding}
     */
    this.createRbacAuthorizationV1beta1NamespacedRoleBinding = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createRbacAuthorizationV1beta1NamespacedRoleBinding";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1RoleBinding;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRbacAuthorizationV1beta1ClusterRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.deleteRbacAuthorizationV1beta1ClusterRole = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteRbacAuthorizationV1beta1ClusterRole";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteRbacAuthorizationV1beta1ClusterRole";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRbacAuthorizationV1beta1ClusterRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.deleteRbacAuthorizationV1beta1ClusterRoleBinding = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteRbacAuthorizationV1beta1ClusterRoleBinding";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteRbacAuthorizationV1beta1ClusterRoleBinding";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRbacAuthorizationV1beta1CollectionClusterRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1CollectionClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ClusterRole
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1CollectionClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.deleteRbacAuthorizationV1beta1CollectionClusterRole = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1CollectionClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ClusterRoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1CollectionClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRbacAuthorizationV1beta1CollectionNamespacedRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1CollectionNamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1CollectionNamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.deleteRbacAuthorizationV1beta1CollectionNamespacedRole = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteRbacAuthorizationV1beta1CollectionNamespacedRole";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRbacAuthorizationV1beta1NamespacedRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.deleteRbacAuthorizationV1beta1NamespacedRole = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteRbacAuthorizationV1beta1NamespacedRole";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRbacAuthorizationV1beta1NamespacedRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/RbacAuthorizationvbetaApi~deleteRbacAuthorizationV1beta1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.deleteRbacAuthorizationV1beta1NamespacedRoleBinding = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteRbacAuthorizationV1beta1NamespacedRoleBinding";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRbacAuthorizationV1beta1APIResources operation.
     * @callback module:api/RbacAuthorizationvbetaApi~getRbacAuthorizationV1beta1APIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1APIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:api/RbacAuthorizationvbetaApi~getRbacAuthorizationV1beta1APIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1APIResourceList}
     */
    this.getRbacAuthorizationV1beta1APIResources = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1APIResourceList;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRbacAuthorizationV1beta1ClusterRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRoleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ClusterRole
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRoleList}
     */
    this.listRbacAuthorizationV1beta1ClusterRole = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1ClusterRoleList;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRbacAuthorizationV1beta1ClusterRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRoleBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ClusterRoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRoleBindingList}
     */
    this.listRbacAuthorizationV1beta1ClusterRoleBinding = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1ClusterRoleBindingList;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRbacAuthorizationV1beta1NamespacedRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1RoleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1RoleList}
     */
    this.listRbacAuthorizationV1beta1NamespacedRole = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listRbacAuthorizationV1beta1NamespacedRole";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1RoleList;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRbacAuthorizationV1beta1NamespacedRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1RoleBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1RoleBindingList}
     */
    this.listRbacAuthorizationV1beta1NamespacedRoleBinding = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listRbacAuthorizationV1beta1NamespacedRoleBinding";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1RoleBindingList;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRbacAuthorizationV1beta1RoleBindingForAllNamespaces operation.
     * @callback module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1RoleBindingForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1RoleBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind RoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1RoleBindingForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1RoleBindingList}
     */
    this.listRbacAuthorizationV1beta1RoleBindingForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1RoleBindingList;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/rolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRbacAuthorizationV1beta1RoleForAllNamespaces operation.
     * @callback module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1RoleForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1RoleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Role
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~listRbacAuthorizationV1beta1RoleForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1RoleList}
     */
    this.listRbacAuthorizationV1beta1RoleForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1RoleList;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchRbacAuthorizationV1beta1ClusterRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~patchRbacAuthorizationV1beta1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {module:model/V1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~patchRbacAuthorizationV1beta1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRole}
     */
    this.patchRbacAuthorizationV1beta1ClusterRole = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchRbacAuthorizationV1beta1ClusterRole";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchRbacAuthorizationV1beta1ClusterRole";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ClusterRole;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchRbacAuthorizationV1beta1ClusterRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~patchRbacAuthorizationV1beta1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {module:model/V1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~patchRbacAuthorizationV1beta1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRoleBinding}
     */
    this.patchRbacAuthorizationV1beta1ClusterRoleBinding = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchRbacAuthorizationV1beta1ClusterRoleBinding";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchRbacAuthorizationV1beta1ClusterRoleBinding";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ClusterRoleBinding;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchRbacAuthorizationV1beta1NamespacedRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~patchRbacAuthorizationV1beta1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~patchRbacAuthorizationV1beta1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Role}
     */
    this.patchRbacAuthorizationV1beta1NamespacedRole = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchRbacAuthorizationV1beta1NamespacedRole";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Role;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchRbacAuthorizationV1beta1NamespacedRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~patchRbacAuthorizationV1beta1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~patchRbacAuthorizationV1beta1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1RoleBinding}
     */
    this.patchRbacAuthorizationV1beta1NamespacedRoleBinding = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchRbacAuthorizationV1beta1NamespacedRoleBinding";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1RoleBinding;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readRbacAuthorizationV1beta1ClusterRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~readRbacAuthorizationV1beta1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~readRbacAuthorizationV1beta1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRole}
     */
    this.readRbacAuthorizationV1beta1ClusterRole = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readRbacAuthorizationV1beta1ClusterRole";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ClusterRole;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readRbacAuthorizationV1beta1ClusterRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~readRbacAuthorizationV1beta1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~readRbacAuthorizationV1beta1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRoleBinding}
     */
    this.readRbacAuthorizationV1beta1ClusterRoleBinding = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readRbacAuthorizationV1beta1ClusterRoleBinding";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ClusterRoleBinding;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readRbacAuthorizationV1beta1NamespacedRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~readRbacAuthorizationV1beta1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~readRbacAuthorizationV1beta1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Role}
     */
    this.readRbacAuthorizationV1beta1NamespacedRole = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readRbacAuthorizationV1beta1NamespacedRole";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Role;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readRbacAuthorizationV1beta1NamespacedRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~readRbacAuthorizationV1beta1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~readRbacAuthorizationV1beta1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1RoleBinding}
     */
    this.readRbacAuthorizationV1beta1NamespacedRoleBinding = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readRbacAuthorizationV1beta1NamespacedRoleBinding";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1RoleBinding;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceRbacAuthorizationV1beta1ClusterRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~replaceRbacAuthorizationV1beta1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {module:model/V1beta1ClusterRole} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~replaceRbacAuthorizationV1beta1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRole}
     */
    this.replaceRbacAuthorizationV1beta1ClusterRole = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceRbacAuthorizationV1beta1ClusterRole";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceRbacAuthorizationV1beta1ClusterRole";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ClusterRole;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceRbacAuthorizationV1beta1ClusterRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~replaceRbacAuthorizationV1beta1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ClusterRoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {module:model/V1beta1ClusterRoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~replaceRbacAuthorizationV1beta1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ClusterRoleBinding}
     */
    this.replaceRbacAuthorizationV1beta1ClusterRoleBinding = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceRbacAuthorizationV1beta1ClusterRoleBinding";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceRbacAuthorizationV1beta1ClusterRoleBinding";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ClusterRoleBinding;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceRbacAuthorizationV1beta1NamespacedRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~replaceRbacAuthorizationV1beta1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Role} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~replaceRbacAuthorizationV1beta1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Role}
     */
    this.replaceRbacAuthorizationV1beta1NamespacedRole = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceRbacAuthorizationV1beta1NamespacedRole";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Role;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceRbacAuthorizationV1beta1NamespacedRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~replaceRbacAuthorizationV1beta1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1RoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/RbacAuthorizationvbetaApi~replaceRbacAuthorizationV1beta1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1RoleBinding}
     */
    this.replaceRbacAuthorizationV1beta1NamespacedRoleBinding = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceRbacAuthorizationV1beta1NamespacedRoleBinding";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1RoleBinding;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1ClusterRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1ClusterRole = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchRbacAuthorizationV1beta1ClusterRole";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1ClusterRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1ClusterRoleBinding = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchRbacAuthorizationV1beta1ClusterRoleBinding";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1ClusterRoleBindingList operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1ClusterRoleBindingListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ClusterRoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1ClusterRoleBindingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1ClusterRoleBindingList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1ClusterRoleList operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1ClusterRoleListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ClusterRole
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1ClusterRoleListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1ClusterRoleList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1NamespacedRole operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1NamespacedRole = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchRbacAuthorizationV1beta1NamespacedRole";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchRbacAuthorizationV1beta1NamespacedRole";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1NamespacedRoleBinding operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1NamespacedRoleBinding = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchRbacAuthorizationV1beta1NamespacedRoleBinding";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchRbacAuthorizationV1beta1NamespacedRoleBinding";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1NamespacedRoleBindingList operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1NamespacedRoleBindingListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1NamespacedRoleBindingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1NamespacedRoleBindingList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchRbacAuthorizationV1beta1NamespacedRoleBindingList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1NamespacedRoleList operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1NamespacedRoleListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1NamespacedRoleListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1NamespacedRoleList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchRbacAuthorizationV1beta1NamespacedRoleList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of RoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchRbacAuthorizationV1beta1RoleListForAllNamespaces operation.
     * @callback module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1RoleListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Role
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/RbacAuthorizationvbetaApi~watchRbacAuthorizationV1beta1RoleListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1WatchEvent}
     */
    this.watchRbacAuthorizationV1beta1RoleListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*_/_*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1WatchEvent;

      return this.apiClient.callApi(
        '/apis/rbac.authorization.k8s.io/v1beta1/watch/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
