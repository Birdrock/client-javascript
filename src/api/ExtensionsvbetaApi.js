/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: unversioned
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1beta1DaemonSet', 'model/V1beta1Deployment', 'model/V1beta1DeploymentRollback', 'model/V1beta1HorizontalPodAutoscaler', 'model/V1beta1Ingress', 'model/V1beta1Job', 'model/V1beta1NetworkPolicy', 'model/V1beta1ReplicaSet', 'model/V1beta1ThirdPartyResource', 'model/UnversionedStatus', 'model/V1DeleteOptions', 'model/UnversionedAPIResourceList', 'model/V1beta1DaemonSetList', 'model/V1beta1DeploymentList', 'model/V1beta1HorizontalPodAutoscalerList', 'model/V1beta1IngressList', 'model/V1beta1JobList', 'model/V1beta1NetworkPolicyList', 'model/V1beta1ReplicaSetList', 'model/V1beta1ThirdPartyResourceList', 'model/UnversionedPatch', 'model/V1beta1Scale', 'model/VersionedEvent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V1beta1DaemonSet'), require('../model/V1beta1Deployment'), require('../model/V1beta1DeploymentRollback'), require('../model/V1beta1HorizontalPodAutoscaler'), require('../model/V1beta1Ingress'), require('../model/V1beta1Job'), require('../model/V1beta1NetworkPolicy'), require('../model/V1beta1ReplicaSet'), require('../model/V1beta1ThirdPartyResource'), require('../model/UnversionedStatus'), require('../model/V1DeleteOptions'), require('../model/UnversionedAPIResourceList'), require('../model/V1beta1DaemonSetList'), require('../model/V1beta1DeploymentList'), require('../model/V1beta1HorizontalPodAutoscalerList'), require('../model/V1beta1IngressList'), require('../model/V1beta1JobList'), require('../model/V1beta1NetworkPolicyList'), require('../model/V1beta1ReplicaSetList'), require('../model/V1beta1ThirdPartyResourceList'), require('../model/UnversionedPatch'), require('../model/V1beta1Scale'), require('../model/VersionedEvent'));
  } else {
    // Browser globals (root is window)
    if (!root.Kubernetes) {
      root.Kubernetes = {};
    }
    root.Kubernetes.ExtensionsvbetaApi = factory(root.Kubernetes.ApiClient, root.Kubernetes.V1beta1DaemonSet, root.Kubernetes.V1beta1Deployment, root.Kubernetes.V1beta1DeploymentRollback, root.Kubernetes.V1beta1HorizontalPodAutoscaler, root.Kubernetes.V1beta1Ingress, root.Kubernetes.V1beta1Job, root.Kubernetes.V1beta1NetworkPolicy, root.Kubernetes.V1beta1ReplicaSet, root.Kubernetes.V1beta1ThirdPartyResource, root.Kubernetes.UnversionedStatus, root.Kubernetes.V1DeleteOptions, root.Kubernetes.UnversionedAPIResourceList, root.Kubernetes.V1beta1DaemonSetList, root.Kubernetes.V1beta1DeploymentList, root.Kubernetes.V1beta1HorizontalPodAutoscalerList, root.Kubernetes.V1beta1IngressList, root.Kubernetes.V1beta1JobList, root.Kubernetes.V1beta1NetworkPolicyList, root.Kubernetes.V1beta1ReplicaSetList, root.Kubernetes.V1beta1ThirdPartyResourceList, root.Kubernetes.UnversionedPatch, root.Kubernetes.V1beta1Scale, root.Kubernetes.VersionedEvent);
  }
}(this, function(ApiClient, V1beta1DaemonSet, V1beta1Deployment, V1beta1DeploymentRollback, V1beta1HorizontalPodAutoscaler, V1beta1Ingress, V1beta1Job, V1beta1NetworkPolicy, V1beta1ReplicaSet, V1beta1ThirdPartyResource, UnversionedStatus, V1DeleteOptions, UnversionedAPIResourceList, V1beta1DaemonSetList, V1beta1DeploymentList, V1beta1HorizontalPodAutoscalerList, V1beta1IngressList, V1beta1JobList, V1beta1NetworkPolicyList, V1beta1ReplicaSetList, V1beta1ThirdPartyResourceList, UnversionedPatch, V1beta1Scale, VersionedEvent) {
  'use strict';

  /**
   * Extensionsvbeta service.
   * @module api/ExtensionsvbetaApi
   * @version unversioned
   */

  /**
   * Constructs a new ExtensionsvbetaApi. 
   * @alias module:api/ExtensionsvbetaApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createExtensionsV1beta1NamespacedDaemonSet operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedDaemonSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1DaemonSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedDaemonSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSet}
     */
    this.createExtensionsV1beta1NamespacedDaemonSet = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1NamespacedDaemonSet";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1DaemonSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExtensionsV1beta1NamespacedDeployment operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Deployment} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Deployment}
     */
    this.createExtensionsV1beta1NamespacedDeployment = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1NamespacedDeployment";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      // var contentTypes = ['application/json'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExtensionsV1beta1NamespacedDeploymentRollbackRollback operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedDeploymentRollbackRollbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DeploymentRollback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create rollback of a DeploymentRollback
     * @param {module:model/V1beta1DeploymentRollback} body 
     * @param {String} name name of the DeploymentRollback
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedDeploymentRollbackRollbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DeploymentRollback}
     */
    this.createExtensionsV1beta1NamespacedDeploymentRollbackRollback = function(body, name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1NamespacedDeploymentRollbackRollback";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling createExtensionsV1beta1NamespacedDeploymentRollbackRollback";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createExtensionsV1beta1NamespacedDeploymentRollbackRollback";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1DeploymentRollback;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExtensionsV1beta1NamespacedHorizontalPodAutoscaler operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscaler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1HorizontalPodAutoscaler} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscaler}
     */
    this.createExtensionsV1beta1NamespacedHorizontalPodAutoscaler = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1HorizontalPodAutoscaler;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExtensionsV1beta1NamespacedIngress operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Ingress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Ingress} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Ingress}
     */
    this.createExtensionsV1beta1NamespacedIngress = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1NamespacedIngress";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Ingress;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExtensionsV1beta1NamespacedJob operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Job} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Job}
     */
    this.createExtensionsV1beta1NamespacedJob = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1NamespacedJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Job;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExtensionsV1beta1NamespacedNetworkPolicy operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedNetworkPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1NetworkPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1NetworkPolicy} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedNetworkPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1NetworkPolicy}
     */
    this.createExtensionsV1beta1NamespacedNetworkPolicy = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1NamespacedNetworkPolicy";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1NetworkPolicy;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExtensionsV1beta1NamespacedReplicaSet operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedReplicaSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1ReplicaSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1NamespacedReplicaSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSet}
     */
    this.createExtensionsV1beta1NamespacedReplicaSet = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling createExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1NamespacedReplicaSet";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ReplicaSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExtensionsV1beta1ThirdPartyResource operation.
     * @callback module:api/ExtensionsvbetaApi~createExtensionsV1beta1ThirdPartyResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ThirdPartyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ThirdPartyResource
     * @param {module:model/V1beta1ThirdPartyResource} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~createExtensionsV1beta1ThirdPartyResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ThirdPartyResource}
     */
    this.createExtensionsV1beta1ThirdPartyResource = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createExtensionsV1beta1ThirdPartyResource";
      }


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ThirdPartyResource;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/thirdpartyresources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1CollectionNamespacedDaemonSet operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedDaemonSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedDaemonSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1CollectionNamespacedDaemonSet = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1CollectionNamespacedDaemonSet";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1CollectionNamespacedDeployment operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1CollectionNamespacedDeployment = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1CollectionNamespacedDeployment";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1CollectionNamespacedHorizontalPodAutoscaler operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedHorizontalPodAutoscalerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedHorizontalPodAutoscalerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1CollectionNamespacedHorizontalPodAutoscaler = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1CollectionNamespacedHorizontalPodAutoscaler";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1CollectionNamespacedIngress operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1CollectionNamespacedIngress = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1CollectionNamespacedIngress";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1CollectionNamespacedJob operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1CollectionNamespacedJob = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1CollectionNamespacedJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedNetworkPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedNetworkPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1CollectionNamespacedReplicaSet operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedReplicaSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionNamespacedReplicaSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1CollectionNamespacedReplicaSet = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1CollectionNamespacedReplicaSet";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1CollectionThirdPartyResource operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionThirdPartyResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ThirdPartyResource
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1CollectionThirdPartyResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1CollectionThirdPartyResource = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/thirdpartyresources', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1NamespacedDaemonSet operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedDaemonSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a DaemonSet
     * @param {String} name name of the DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedDaemonSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1NamespacedDaemonSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteExtensionsV1beta1NamespacedDaemonSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1NamespacedDeployment operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1NamespacedDeployment = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteExtensionsV1beta1NamespacedDeployment";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1NamespacedHorizontalPodAutoscaler operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a HorizontalPodAutoscaler
     * @param {String} name name of the HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1NamespacedHorizontalPodAutoscaler = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1NamespacedIngress operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an Ingress
     * @param {String} name name of the Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1NamespacedIngress = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteExtensionsV1beta1NamespacedIngress";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1NamespacedJob operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1NamespacedJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteExtensionsV1beta1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1NamespacedNetworkPolicy operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedNetworkPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a NetworkPolicy
     * @param {String} name name of the NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedNetworkPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1NamespacedNetworkPolicy = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteExtensionsV1beta1NamespacedNetworkPolicy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1NamespacedReplicaSet operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedReplicaSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ReplicaSet
     * @param {String} name name of the ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1NamespacedReplicaSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1NamespacedReplicaSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling deleteExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteExtensionsV1beta1NamespacedReplicaSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionsV1beta1ThirdPartyResource operation.
     * @callback module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1ThirdPartyResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ThirdPartyResource
     * @param {String} name name of the ThirdPartyResource
     * @param {module:model/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Integer} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:api/ExtensionsvbetaApi~deleteExtensionsV1beta1ThirdPartyResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedStatus}
     */
    this.deleteExtensionsV1beta1ThirdPartyResource = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling deleteExtensionsV1beta1ThirdPartyResource";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling deleteExtensionsV1beta1ThirdPartyResource";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/thirdpartyresources/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtensionsV1beta1APIResources operation.
     * @callback module:api/ExtensionsvbetaApi~getExtensionsV1beta1APIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnversionedAPIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:api/ExtensionsvbetaApi~getExtensionsV1beta1APIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnversionedAPIResourceList}
     */
    this.getExtensionsV1beta1APIResources = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedAPIResourceList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1DaemonSetForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1DaemonSetForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind DaemonSet
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1DaemonSetForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSetList}
     */
    this.listExtensionsV1beta1DaemonSetForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1DaemonSetList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/daemonsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1DeploymentForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1DeploymentForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DeploymentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Deployment
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1DeploymentForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DeploymentList}
     */
    this.listExtensionsV1beta1DeploymentForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1DeploymentList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1HorizontalPodAutoscalerForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1HorizontalPodAutoscalerForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscalerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind HorizontalPodAutoscaler
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1HorizontalPodAutoscalerForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscalerList}
     */
    this.listExtensionsV1beta1HorizontalPodAutoscalerForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1HorizontalPodAutoscalerList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/horizontalpodautoscalers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1IngressForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1IngressForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1IngressList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Ingress
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1IngressForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1IngressList}
     */
    this.listExtensionsV1beta1IngressForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1IngressList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/ingresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1JobForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1JobForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1JobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Job
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1JobForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1JobList}
     */
    this.listExtensionsV1beta1JobForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1JobList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1NamespacedDaemonSet operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedDaemonSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedDaemonSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSetList}
     */
    this.listExtensionsV1beta1NamespacedDaemonSet = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listExtensionsV1beta1NamespacedDaemonSet";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1DaemonSetList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1NamespacedDeployment operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DeploymentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DeploymentList}
     */
    this.listExtensionsV1beta1NamespacedDeployment = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listExtensionsV1beta1NamespacedDeployment";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1DeploymentList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1NamespacedHorizontalPodAutoscaler operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscalerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscalerList}
     */
    this.listExtensionsV1beta1NamespacedHorizontalPodAutoscaler = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1HorizontalPodAutoscalerList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1NamespacedIngress operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1IngressList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1IngressList}
     */
    this.listExtensionsV1beta1NamespacedIngress = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listExtensionsV1beta1NamespacedIngress";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1IngressList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1NamespacedJob operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1JobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1JobList}
     */
    this.listExtensionsV1beta1NamespacedJob = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listExtensionsV1beta1NamespacedJob";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1JobList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1NamespacedNetworkPolicy operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedNetworkPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1NetworkPolicyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedNetworkPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1NetworkPolicyList}
     */
    this.listExtensionsV1beta1NamespacedNetworkPolicy = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listExtensionsV1beta1NamespacedNetworkPolicy";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1NetworkPolicyList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1NamespacedReplicaSet operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedReplicaSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1NamespacedReplicaSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSetList}
     */
    this.listExtensionsV1beta1NamespacedReplicaSet = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling listExtensionsV1beta1NamespacedReplicaSet";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1ReplicaSetList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1NetworkPolicyForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1NetworkPolicyForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1NetworkPolicyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind NetworkPolicy
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1NetworkPolicyForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1NetworkPolicyList}
     */
    this.listExtensionsV1beta1NetworkPolicyForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1NetworkPolicyList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/networkpolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1ReplicaSetForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1ReplicaSetForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ReplicaSet
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1ReplicaSetForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSetList}
     */
    this.listExtensionsV1beta1ReplicaSetForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1ReplicaSetList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/replicasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionsV1beta1ThirdPartyResource operation.
     * @callback module:api/ExtensionsvbetaApi~listExtensionsV1beta1ThirdPartyResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ThirdPartyResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ThirdPartyResource
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~listExtensionsV1beta1ThirdPartyResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ThirdPartyResourceList}
     */
    this.listExtensionsV1beta1ThirdPartyResource = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1ThirdPartyResourceList;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/thirdpartyresources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedDaemonSet operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDaemonSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified DaemonSet
     * @param {String} name name of the DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDaemonSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSet}
     */
    this.patchExtensionsV1beta1NamespacedDaemonSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedDaemonSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1DaemonSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedDaemonSetStatus operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDaemonSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified DaemonSet
     * @param {String} name name of the DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDaemonSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSet}
     */
    this.patchExtensionsV1beta1NamespacedDaemonSetStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedDaemonSetStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedDaemonSetStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedDaemonSetStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1DaemonSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedDeployment operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Deployment}
     */
    this.patchExtensionsV1beta1NamespacedDeployment = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedDeployment";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedDeploymentStatus operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDeploymentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDeploymentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Deployment}
     */
    this.patchExtensionsV1beta1NamespacedDeploymentStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedDeploymentStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedDeploymentStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedDeploymentStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedDeploymentsScale operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDeploymentsScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedDeploymentsScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.patchExtensionsV1beta1NamespacedDeploymentsScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedDeploymentsScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedDeploymentsScale";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedDeploymentsScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedHorizontalPodAutoscaler operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscaler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified HorizontalPodAutoscaler
     * @param {String} name name of the HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscaler}
     */
    this.patchExtensionsV1beta1NamespacedHorizontalPodAutoscaler = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1HorizontalPodAutoscaler;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscaler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified HorizontalPodAutoscaler
     * @param {String} name name of the HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscaler}
     */
    this.patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1HorizontalPodAutoscaler;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedIngress operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Ingress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Ingress
     * @param {String} name name of the Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Ingress}
     */
    this.patchExtensionsV1beta1NamespacedIngress = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedIngress";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Ingress;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedIngressStatus operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedIngressStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Ingress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Ingress
     * @param {String} name name of the Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedIngressStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Ingress}
     */
    this.patchExtensionsV1beta1NamespacedIngressStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedIngressStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedIngressStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedIngressStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Ingress;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedJob operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Job}
     */
    this.patchExtensionsV1beta1NamespacedJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Job;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedJobStatus operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Job}
     */
    this.patchExtensionsV1beta1NamespacedJobStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedJobStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Job;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedNetworkPolicy operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedNetworkPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1NetworkPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified NetworkPolicy
     * @param {String} name name of the NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedNetworkPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1NetworkPolicy}
     */
    this.patchExtensionsV1beta1NamespacedNetworkPolicy = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedNetworkPolicy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1NetworkPolicy;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedReplicaSet operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedReplicaSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ReplicaSet
     * @param {String} name name of the ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedReplicaSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSet}
     */
    this.patchExtensionsV1beta1NamespacedReplicaSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedReplicaSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ReplicaSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedReplicaSetStatus operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedReplicaSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified ReplicaSet
     * @param {String} name name of the ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedReplicaSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSet}
     */
    this.patchExtensionsV1beta1NamespacedReplicaSetStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedReplicaSetStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedReplicaSetStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedReplicaSetStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ReplicaSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedReplicasetsScale operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedReplicasetsScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedReplicasetsScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.patchExtensionsV1beta1NamespacedReplicasetsScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedReplicasetsScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedReplicasetsScale";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedReplicasetsScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1NamespacedReplicationcontrollersScale operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedReplicationcontrollersScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1NamespacedReplicationcontrollersScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.patchExtensionsV1beta1NamespacedReplicationcontrollersScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1NamespacedReplicationcontrollersScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling patchExtensionsV1beta1NamespacedReplicationcontrollersScale";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1NamespacedReplicationcontrollersScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtensionsV1beta1ThirdPartyResource operation.
     * @callback module:api/ExtensionsvbetaApi~patchExtensionsV1beta1ThirdPartyResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ThirdPartyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ThirdPartyResource
     * @param {String} name name of the ThirdPartyResource
     * @param {module:model/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~patchExtensionsV1beta1ThirdPartyResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ThirdPartyResource}
     */
    this.patchExtensionsV1beta1ThirdPartyResource = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling patchExtensionsV1beta1ThirdPartyResource";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling patchExtensionsV1beta1ThirdPartyResource";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ThirdPartyResource;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/thirdpartyresources/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedDaemonSet operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDaemonSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified DaemonSet
     * @param {String} name name of the DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDaemonSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSet}
     */
    this.readExtensionsV1beta1NamespacedDaemonSet = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedDaemonSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1DaemonSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedDaemonSetStatus operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDaemonSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified DaemonSet
     * @param {String} name name of the DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDaemonSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSet}
     */
    this.readExtensionsV1beta1NamespacedDaemonSetStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedDaemonSetStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedDaemonSetStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1DaemonSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedDeployment operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Deployment}
     */
    this.readExtensionsV1beta1NamespacedDeployment = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedDeployment";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedDeploymentStatus operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDeploymentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDeploymentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Deployment}
     */
    this.readExtensionsV1beta1NamespacedDeploymentStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedDeploymentStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedDeploymentStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedDeploymentsScale operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDeploymentsScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedDeploymentsScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.readExtensionsV1beta1NamespacedDeploymentsScale = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedDeploymentsScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedDeploymentsScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedHorizontalPodAutoscaler operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscaler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified HorizontalPodAutoscaler
     * @param {String} name name of the HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscaler}
     */
    this.readExtensionsV1beta1NamespacedHorizontalPodAutoscaler = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1HorizontalPodAutoscaler;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscaler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified HorizontalPodAutoscaler
     * @param {String} name name of the HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscaler}
     */
    this.readExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1HorizontalPodAutoscaler;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedIngress operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Ingress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Ingress
     * @param {String} name name of the Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Ingress}
     */
    this.readExtensionsV1beta1NamespacedIngress = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedIngress";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Ingress;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedIngressStatus operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedIngressStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Ingress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Ingress
     * @param {String} name name of the Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedIngressStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Ingress}
     */
    this.readExtensionsV1beta1NamespacedIngressStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedIngressStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedIngressStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Ingress;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedJob operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Job}
     */
    this.readExtensionsV1beta1NamespacedJob = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Job;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedJobStatus operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Job}
     */
    this.readExtensionsV1beta1NamespacedJobStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Job;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedNetworkPolicy operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedNetworkPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1NetworkPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified NetworkPolicy
     * @param {String} name name of the NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedNetworkPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1NetworkPolicy}
     */
    this.readExtensionsV1beta1NamespacedNetworkPolicy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedNetworkPolicy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1NetworkPolicy;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedReplicaSet operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedReplicaSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ReplicaSet
     * @param {String} name name of the ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedReplicaSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSet}
     */
    this.readExtensionsV1beta1NamespacedReplicaSet = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedReplicaSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ReplicaSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedReplicaSetStatus operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedReplicaSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified ReplicaSet
     * @param {String} name name of the ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedReplicaSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSet}
     */
    this.readExtensionsV1beta1NamespacedReplicaSetStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedReplicaSetStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedReplicaSetStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ReplicaSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedReplicasetsScale operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedReplicasetsScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedReplicasetsScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.readExtensionsV1beta1NamespacedReplicasetsScale = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedReplicasetsScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedReplicasetsScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1NamespacedReplicationcontrollersScale operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedReplicationcontrollersScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1NamespacedReplicationcontrollersScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.readExtensionsV1beta1NamespacedReplicationcontrollersScale = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1NamespacedReplicationcontrollersScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling readExtensionsV1beta1NamespacedReplicationcontrollersScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readExtensionsV1beta1ThirdPartyResource operation.
     * @callback module:api/ExtensionsvbetaApi~readExtensionsV1beta1ThirdPartyResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ThirdPartyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ThirdPartyResource
     * @param {String} name name of the ThirdPartyResource
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ExtensionsvbetaApi~readExtensionsV1beta1ThirdPartyResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ThirdPartyResource}
     */
    this.readExtensionsV1beta1ThirdPartyResource = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling readExtensionsV1beta1ThirdPartyResource";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ThirdPartyResource;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/thirdpartyresources/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedDaemonSet operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDaemonSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified DaemonSet
     * @param {String} name name of the DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1DaemonSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDaemonSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSet}
     */
    this.replaceExtensionsV1beta1NamespacedDaemonSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedDaemonSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1DaemonSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedDaemonSetStatus operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDaemonSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1DaemonSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified DaemonSet
     * @param {String} name name of the DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1DaemonSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDaemonSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1DaemonSet}
     */
    this.replaceExtensionsV1beta1NamespacedDaemonSetStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedDaemonSetStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedDaemonSetStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedDaemonSetStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1DaemonSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedDeployment operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Deployment} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Deployment}
     */
    this.replaceExtensionsV1beta1NamespacedDeployment = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedDeployment";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedDeploymentStatus operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDeploymentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Deployment} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDeploymentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Deployment}
     */
    this.replaceExtensionsV1beta1NamespacedDeploymentStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedDeploymentStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedDeploymentStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedDeploymentStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedDeploymentsScale operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDeploymentsScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Scale} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedDeploymentsScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.replaceExtensionsV1beta1NamespacedDeploymentsScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedDeploymentsScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedDeploymentsScale";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedDeploymentsScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedHorizontalPodAutoscaler operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscaler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified HorizontalPodAutoscaler
     * @param {String} name name of the HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1HorizontalPodAutoscaler} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscaler}
     */
    this.replaceExtensionsV1beta1NamespacedHorizontalPodAutoscaler = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1HorizontalPodAutoscaler;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1HorizontalPodAutoscaler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified HorizontalPodAutoscaler
     * @param {String} name name of the HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1HorizontalPodAutoscaler} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1HorizontalPodAutoscaler}
     */
    this.replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1HorizontalPodAutoscaler;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedIngress operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Ingress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Ingress
     * @param {String} name name of the Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Ingress} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Ingress}
     */
    this.replaceExtensionsV1beta1NamespacedIngress = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedIngress";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Ingress;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedIngressStatus operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedIngressStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Ingress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Ingress
     * @param {String} name name of the Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Ingress} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedIngressStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Ingress}
     */
    this.replaceExtensionsV1beta1NamespacedIngressStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedIngressStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedIngressStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedIngressStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Ingress;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedJob operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Job} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Job}
     */
    this.replaceExtensionsV1beta1NamespacedJob = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Job;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedJobStatus operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Job} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Job}
     */
    this.replaceExtensionsV1beta1NamespacedJobStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedJobStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedJobStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedJobStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Job;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedNetworkPolicy operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedNetworkPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1NetworkPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified NetworkPolicy
     * @param {String} name name of the NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1NetworkPolicy} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedNetworkPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1NetworkPolicy}
     */
    this.replaceExtensionsV1beta1NamespacedNetworkPolicy = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedNetworkPolicy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1NetworkPolicy;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedReplicaSet operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedReplicaSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ReplicaSet
     * @param {String} name name of the ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1ReplicaSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedReplicaSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSet}
     */
    this.replaceExtensionsV1beta1NamespacedReplicaSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedReplicaSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ReplicaSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedReplicaSetStatus operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedReplicaSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ReplicaSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified ReplicaSet
     * @param {String} name name of the ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1ReplicaSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedReplicaSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ReplicaSet}
     */
    this.replaceExtensionsV1beta1NamespacedReplicaSetStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedReplicaSetStatus";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedReplicaSetStatus";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedReplicaSetStatus";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ReplicaSet;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedReplicasetsScale operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedReplicasetsScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Scale} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedReplicasetsScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.replaceExtensionsV1beta1NamespacedReplicasetsScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedReplicasetsScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedReplicasetsScale";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedReplicasetsScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1NamespacedReplicationcontrollersScale operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedReplicationcontrollersScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:model/V1beta1Scale} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1NamespacedReplicationcontrollersScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1Scale}
     */
    this.replaceExtensionsV1beta1NamespacedReplicationcontrollersScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1NamespacedReplicationcontrollersScale";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling replaceExtensionsV1beta1NamespacedReplicationcontrollersScale";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1NamespacedReplicationcontrollersScale";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1Scale;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceExtensionsV1beta1ThirdPartyResource operation.
     * @callback module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1ThirdPartyResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1ThirdPartyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ThirdPartyResource
     * @param {String} name name of the ThirdPartyResource
     * @param {module:model/V1beta1ThirdPartyResource} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ExtensionsvbetaApi~replaceExtensionsV1beta1ThirdPartyResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1ThirdPartyResource}
     */
    this.replaceExtensionsV1beta1ThirdPartyResource = function(name, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling replaceExtensionsV1beta1ThirdPartyResource";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling replaceExtensionsV1beta1ThirdPartyResource";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1ThirdPartyResource;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/thirdpartyresources/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1DaemonSetListForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1DaemonSetListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of DaemonSet
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1DaemonSetListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1DaemonSetListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/daemonsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1DeploymentListForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1DeploymentListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Deployment
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1DeploymentListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1DeploymentListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1HorizontalPodAutoscalerListForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1HorizontalPodAutoscalerListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of HorizontalPodAutoscaler
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1HorizontalPodAutoscalerListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1HorizontalPodAutoscalerListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/horizontalpodautoscalers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1IngressListForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1IngressListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Ingress
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1IngressListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1IngressListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/ingresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1JobListForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1JobListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Job
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1JobListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1JobListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedDaemonSet operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedDaemonSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind DaemonSet
     * @param {String} name name of the DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedDaemonSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedDaemonSet = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchExtensionsV1beta1NamespacedDaemonSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedDaemonSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedDaemonSetList operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedDaemonSetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of DaemonSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedDaemonSetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedDaemonSetList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedDaemonSetList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedDeployment operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedDeployment = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchExtensionsV1beta1NamespacedDeployment";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedDeployment";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedDeploymentList operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedDeploymentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedDeploymentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedDeploymentList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedDeploymentList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedHorizontalPodAutoscaler operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind HorizontalPodAutoscaler
     * @param {String} name name of the HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedHorizontalPodAutoscaler = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedHorizontalPodAutoscaler";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerList operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of HorizontalPodAutoscaler
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/horizontalpodautoscalers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedIngress operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Ingress
     * @param {String} name name of the Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedIngress = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchExtensionsV1beta1NamespacedIngress";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedIngress";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedIngressList operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedIngressListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Ingress
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedIngressListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedIngressList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedIngressList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedJob operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Job
     * @param {String} name name of the Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedJob = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchExtensionsV1beta1NamespacedJob";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedJob";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/jobs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedJobList operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedJobListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Job
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedJobListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedJobList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedJobList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedNetworkPolicy operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedNetworkPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind NetworkPolicy
     * @param {String} name name of the NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedNetworkPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedNetworkPolicy = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchExtensionsV1beta1NamespacedNetworkPolicy";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedNetworkPolicy";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedNetworkPolicyList operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedNetworkPolicyListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of NetworkPolicy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedNetworkPolicyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedNetworkPolicyList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedNetworkPolicyList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedReplicaSet operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedReplicaSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ReplicaSet
     * @param {String} name name of the ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedReplicaSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedReplicaSet = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchExtensionsV1beta1NamespacedReplicaSet";
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedReplicaSet";
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NamespacedReplicaSetList operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedReplicaSetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ReplicaSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NamespacedReplicaSetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NamespacedReplicaSetList = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw "Missing the required parameter 'namespace' when calling watchExtensionsV1beta1NamespacedReplicaSetList";
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1NetworkPolicyListForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NetworkPolicyListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of NetworkPolicy
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1NetworkPolicyListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1NetworkPolicyListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/networkpolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1ReplicaSetListForAllNamespaces operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1ReplicaSetListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ReplicaSet
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1ReplicaSetListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1ReplicaSetListForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/replicasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1ThirdPartyResource operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1ThirdPartyResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ThirdPartyResource
     * @param {String} name name of the ThirdPartyResource
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1ThirdPartyResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1ThirdPartyResource = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling watchExtensionsV1beta1ThirdPartyResource";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/thirdpartyresources/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchExtensionsV1beta1ThirdPartyResourceList operation.
     * @callback module:api/ExtensionsvbetaApi~watchExtensionsV1beta1ThirdPartyResourceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionedEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ThirdPartyResource
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Integer} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ExtensionsvbetaApi~watchExtensionsV1beta1ThirdPartyResourceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionedEvent}
     */
    this.watchExtensionsV1beta1ThirdPartyResourceList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = VersionedEvent;

      return this.apiClient.callApi(
        '/apis/extensions/v1beta1/watch/thirdpartyresources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
