/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesJsClient);
  }
}(this, function(expect, KubernetesJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesJsClient.ExtensionsV1beta1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExtensionsV1beta1Api', function() {
    describe('createNamespacedDaemonSet', function() {
      it('should call createNamespacedDaemonSet successfully', function(done) {
        //uncomment below and update the code to test createNamespacedDaemonSet
        //instance.createNamespacedDaemonSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedDeployment', function() {
      it('should call createNamespacedDeployment successfully', function(done) {
        //uncomment below and update the code to test createNamespacedDeployment
        //instance.createNamespacedDeployment(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedDeploymentRollbackRollback', function() {
      it('should call createNamespacedDeploymentRollbackRollback successfully', function(done) {
        //uncomment below and update the code to test createNamespacedDeploymentRollbackRollback
        //instance.createNamespacedDeploymentRollbackRollback(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedHorizontalPodAutoscaler', function() {
      it('should call createNamespacedHorizontalPodAutoscaler successfully', function(done) {
        //uncomment below and update the code to test createNamespacedHorizontalPodAutoscaler
        //instance.createNamespacedHorizontalPodAutoscaler(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedIngress', function() {
      it('should call createNamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test createNamespacedIngress
        //instance.createNamespacedIngress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedJob', function() {
      it('should call createNamespacedJob successfully', function(done) {
        //uncomment below and update the code to test createNamespacedJob
        //instance.createNamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedNetworkPolicy', function() {
      it('should call createNamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test createNamespacedNetworkPolicy
        //instance.createNamespacedNetworkPolicy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedReplicaSet', function() {
      it('should call createNamespacedReplicaSet successfully', function(done) {
        //uncomment below and update the code to test createNamespacedReplicaSet
        //instance.createNamespacedReplicaSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createThirdPartyResource', function() {
      it('should call createThirdPartyResource successfully', function(done) {
        //uncomment below and update the code to test createThirdPartyResource
        //instance.createThirdPartyResource(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedDaemonSet', function() {
      it('should call deleteCollectionNamespacedDaemonSet successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedDaemonSet
        //instance.deleteCollectionNamespacedDaemonSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedDeployment', function() {
      it('should call deleteCollectionNamespacedDeployment successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedDeployment
        //instance.deleteCollectionNamespacedDeployment(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedHorizontalPodAutoscaler', function() {
      it('should call deleteCollectionNamespacedHorizontalPodAutoscaler successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedHorizontalPodAutoscaler
        //instance.deleteCollectionNamespacedHorizontalPodAutoscaler(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedIngress', function() {
      it('should call deleteCollectionNamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedIngress
        //instance.deleteCollectionNamespacedIngress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedJob', function() {
      it('should call deleteCollectionNamespacedJob successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedJob
        //instance.deleteCollectionNamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedNetworkPolicy', function() {
      it('should call deleteCollectionNamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedNetworkPolicy
        //instance.deleteCollectionNamespacedNetworkPolicy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedReplicaSet', function() {
      it('should call deleteCollectionNamespacedReplicaSet successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedReplicaSet
        //instance.deleteCollectionNamespacedReplicaSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionThirdPartyResource', function() {
      it('should call deleteCollectionThirdPartyResource successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionThirdPartyResource
        //instance.deleteCollectionThirdPartyResource(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedDaemonSet', function() {
      it('should call deleteNamespacedDaemonSet successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedDaemonSet
        //instance.deleteNamespacedDaemonSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedDeployment', function() {
      it('should call deleteNamespacedDeployment successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedDeployment
        //instance.deleteNamespacedDeployment(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedHorizontalPodAutoscaler', function() {
      it('should call deleteNamespacedHorizontalPodAutoscaler successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedHorizontalPodAutoscaler
        //instance.deleteNamespacedHorizontalPodAutoscaler(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedIngress', function() {
      it('should call deleteNamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedIngress
        //instance.deleteNamespacedIngress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedJob', function() {
      it('should call deleteNamespacedJob successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedJob
        //instance.deleteNamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedNetworkPolicy', function() {
      it('should call deleteNamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedNetworkPolicy
        //instance.deleteNamespacedNetworkPolicy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedReplicaSet', function() {
      it('should call deleteNamespacedReplicaSet successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedReplicaSet
        //instance.deleteNamespacedReplicaSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteThirdPartyResource', function() {
      it('should call deleteThirdPartyResource successfully', function(done) {
        //uncomment below and update the code to test deleteThirdPartyResource
        //instance.deleteThirdPartyResource(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAPIResources', function() {
      it('should call getAPIResources successfully', function(done) {
        //uncomment below and update the code to test getAPIResources
        //instance.getAPIResources(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDaemonSetForAllNamespaces', function() {
      it('should call listDaemonSetForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listDaemonSetForAllNamespaces
        //instance.listDaemonSetForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeploymentForAllNamespaces', function() {
      it('should call listDeploymentForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listDeploymentForAllNamespaces
        //instance.listDeploymentForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHorizontalPodAutoscalerForAllNamespaces', function() {
      it('should call listHorizontalPodAutoscalerForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listHorizontalPodAutoscalerForAllNamespaces
        //instance.listHorizontalPodAutoscalerForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIngressForAllNamespaces', function() {
      it('should call listIngressForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listIngressForAllNamespaces
        //instance.listIngressForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listJobForAllNamespaces', function() {
      it('should call listJobForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listJobForAllNamespaces
        //instance.listJobForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedDaemonSet', function() {
      it('should call listNamespacedDaemonSet successfully', function(done) {
        //uncomment below and update the code to test listNamespacedDaemonSet
        //instance.listNamespacedDaemonSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedDeployment', function() {
      it('should call listNamespacedDeployment successfully', function(done) {
        //uncomment below and update the code to test listNamespacedDeployment
        //instance.listNamespacedDeployment(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedHorizontalPodAutoscaler', function() {
      it('should call listNamespacedHorizontalPodAutoscaler successfully', function(done) {
        //uncomment below and update the code to test listNamespacedHorizontalPodAutoscaler
        //instance.listNamespacedHorizontalPodAutoscaler(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedIngress', function() {
      it('should call listNamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test listNamespacedIngress
        //instance.listNamespacedIngress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedJob', function() {
      it('should call listNamespacedJob successfully', function(done) {
        //uncomment below and update the code to test listNamespacedJob
        //instance.listNamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedNetworkPolicy', function() {
      it('should call listNamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test listNamespacedNetworkPolicy
        //instance.listNamespacedNetworkPolicy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedReplicaSet', function() {
      it('should call listNamespacedReplicaSet successfully', function(done) {
        //uncomment below and update the code to test listNamespacedReplicaSet
        //instance.listNamespacedReplicaSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNetworkPolicyForAllNamespaces', function() {
      it('should call listNetworkPolicyForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listNetworkPolicyForAllNamespaces
        //instance.listNetworkPolicyForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReplicaSetForAllNamespaces', function() {
      it('should call listReplicaSetForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listReplicaSetForAllNamespaces
        //instance.listReplicaSetForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listThirdPartyResource', function() {
      it('should call listThirdPartyResource successfully', function(done) {
        //uncomment below and update the code to test listThirdPartyResource
        //instance.listThirdPartyResource(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedDaemonSet', function() {
      it('should call patchNamespacedDaemonSet successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedDaemonSet
        //instance.patchNamespacedDaemonSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedDaemonSetStatus', function() {
      it('should call patchNamespacedDaemonSetStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedDaemonSetStatus
        //instance.patchNamespacedDaemonSetStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedDeployment', function() {
      it('should call patchNamespacedDeployment successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedDeployment
        //instance.patchNamespacedDeployment(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedDeploymentStatus', function() {
      it('should call patchNamespacedDeploymentStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedDeploymentStatus
        //instance.patchNamespacedDeploymentStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedDeploymentsScale', function() {
      it('should call patchNamespacedDeploymentsScale successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedDeploymentsScale
        //instance.patchNamespacedDeploymentsScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedHorizontalPodAutoscaler', function() {
      it('should call patchNamespacedHorizontalPodAutoscaler successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedHorizontalPodAutoscaler
        //instance.patchNamespacedHorizontalPodAutoscaler(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedHorizontalPodAutoscalerStatus', function() {
      it('should call patchNamespacedHorizontalPodAutoscalerStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedHorizontalPodAutoscalerStatus
        //instance.patchNamespacedHorizontalPodAutoscalerStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedIngress', function() {
      it('should call patchNamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedIngress
        //instance.patchNamespacedIngress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedIngressStatus', function() {
      it('should call patchNamespacedIngressStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedIngressStatus
        //instance.patchNamespacedIngressStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedJob', function() {
      it('should call patchNamespacedJob successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedJob
        //instance.patchNamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedJobStatus', function() {
      it('should call patchNamespacedJobStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedJobStatus
        //instance.patchNamespacedJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedNetworkPolicy', function() {
      it('should call patchNamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedNetworkPolicy
        //instance.patchNamespacedNetworkPolicy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedReplicaSet', function() {
      it('should call patchNamespacedReplicaSet successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedReplicaSet
        //instance.patchNamespacedReplicaSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedReplicaSetStatus', function() {
      it('should call patchNamespacedReplicaSetStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedReplicaSetStatus
        //instance.patchNamespacedReplicaSetStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedReplicasetsScale', function() {
      it('should call patchNamespacedReplicasetsScale successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedReplicasetsScale
        //instance.patchNamespacedReplicasetsScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedReplicationcontrollersScale', function() {
      it('should call patchNamespacedReplicationcontrollersScale successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedReplicationcontrollersScale
        //instance.patchNamespacedReplicationcontrollersScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchThirdPartyResource', function() {
      it('should call patchThirdPartyResource successfully', function(done) {
        //uncomment below and update the code to test patchThirdPartyResource
        //instance.patchThirdPartyResource(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDaemonSet', function() {
      it('should call readNamespacedDaemonSet successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDaemonSet
        //instance.readNamespacedDaemonSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDaemonSetStatus', function() {
      it('should call readNamespacedDaemonSetStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDaemonSetStatus
        //instance.readNamespacedDaemonSetStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDeployment', function() {
      it('should call readNamespacedDeployment successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDeployment
        //instance.readNamespacedDeployment(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDeploymentStatus', function() {
      it('should call readNamespacedDeploymentStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDeploymentStatus
        //instance.readNamespacedDeploymentStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDeploymentsScale', function() {
      it('should call readNamespacedDeploymentsScale successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDeploymentsScale
        //instance.readNamespacedDeploymentsScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedHorizontalPodAutoscaler', function() {
      it('should call readNamespacedHorizontalPodAutoscaler successfully', function(done) {
        //uncomment below and update the code to test readNamespacedHorizontalPodAutoscaler
        //instance.readNamespacedHorizontalPodAutoscaler(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedHorizontalPodAutoscalerStatus', function() {
      it('should call readNamespacedHorizontalPodAutoscalerStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedHorizontalPodAutoscalerStatus
        //instance.readNamespacedHorizontalPodAutoscalerStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedIngress', function() {
      it('should call readNamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test readNamespacedIngress
        //instance.readNamespacedIngress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedIngressStatus', function() {
      it('should call readNamespacedIngressStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedIngressStatus
        //instance.readNamespacedIngressStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedJob', function() {
      it('should call readNamespacedJob successfully', function(done) {
        //uncomment below and update the code to test readNamespacedJob
        //instance.readNamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedJobStatus', function() {
      it('should call readNamespacedJobStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedJobStatus
        //instance.readNamespacedJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedNetworkPolicy', function() {
      it('should call readNamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test readNamespacedNetworkPolicy
        //instance.readNamespacedNetworkPolicy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedReplicaSet', function() {
      it('should call readNamespacedReplicaSet successfully', function(done) {
        //uncomment below and update the code to test readNamespacedReplicaSet
        //instance.readNamespacedReplicaSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedReplicaSetStatus', function() {
      it('should call readNamespacedReplicaSetStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedReplicaSetStatus
        //instance.readNamespacedReplicaSetStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedReplicasetsScale', function() {
      it('should call readNamespacedReplicasetsScale successfully', function(done) {
        //uncomment below and update the code to test readNamespacedReplicasetsScale
        //instance.readNamespacedReplicasetsScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedReplicationcontrollersScale', function() {
      it('should call readNamespacedReplicationcontrollersScale successfully', function(done) {
        //uncomment below and update the code to test readNamespacedReplicationcontrollersScale
        //instance.readNamespacedReplicationcontrollersScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readThirdPartyResource', function() {
      it('should call readThirdPartyResource successfully', function(done) {
        //uncomment below and update the code to test readThirdPartyResource
        //instance.readThirdPartyResource(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedDaemonSet', function() {
      it('should call replaceNamespacedDaemonSet successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedDaemonSet
        //instance.replaceNamespacedDaemonSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedDaemonSetStatus', function() {
      it('should call replaceNamespacedDaemonSetStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedDaemonSetStatus
        //instance.replaceNamespacedDaemonSetStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedDeployment', function() {
      it('should call replaceNamespacedDeployment successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedDeployment
        //instance.replaceNamespacedDeployment(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedDeploymentStatus', function() {
      it('should call replaceNamespacedDeploymentStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedDeploymentStatus
        //instance.replaceNamespacedDeploymentStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedDeploymentsScale', function() {
      it('should call replaceNamespacedDeploymentsScale successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedDeploymentsScale
        //instance.replaceNamespacedDeploymentsScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedHorizontalPodAutoscaler', function() {
      it('should call replaceNamespacedHorizontalPodAutoscaler successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedHorizontalPodAutoscaler
        //instance.replaceNamespacedHorizontalPodAutoscaler(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedHorizontalPodAutoscalerStatus', function() {
      it('should call replaceNamespacedHorizontalPodAutoscalerStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedHorizontalPodAutoscalerStatus
        //instance.replaceNamespacedHorizontalPodAutoscalerStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedIngress', function() {
      it('should call replaceNamespacedIngress successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedIngress
        //instance.replaceNamespacedIngress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedIngressStatus', function() {
      it('should call replaceNamespacedIngressStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedIngressStatus
        //instance.replaceNamespacedIngressStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedJob', function() {
      it('should call replaceNamespacedJob successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedJob
        //instance.replaceNamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedJobStatus', function() {
      it('should call replaceNamespacedJobStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedJobStatus
        //instance.replaceNamespacedJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedNetworkPolicy', function() {
      it('should call replaceNamespacedNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedNetworkPolicy
        //instance.replaceNamespacedNetworkPolicy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedReplicaSet', function() {
      it('should call replaceNamespacedReplicaSet successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedReplicaSet
        //instance.replaceNamespacedReplicaSet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedReplicaSetStatus', function() {
      it('should call replaceNamespacedReplicaSetStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedReplicaSetStatus
        //instance.replaceNamespacedReplicaSetStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedReplicasetsScale', function() {
      it('should call replaceNamespacedReplicasetsScale successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedReplicasetsScale
        //instance.replaceNamespacedReplicasetsScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedReplicationcontrollersScale', function() {
      it('should call replaceNamespacedReplicationcontrollersScale successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedReplicationcontrollersScale
        //instance.replaceNamespacedReplicationcontrollersScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceThirdPartyResource', function() {
      it('should call replaceThirdPartyResource successfully', function(done) {
        //uncomment below and update the code to test replaceThirdPartyResource
        //instance.replaceThirdPartyResource(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
