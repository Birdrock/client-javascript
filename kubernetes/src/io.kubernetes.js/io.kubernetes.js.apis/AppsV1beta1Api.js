/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['io.kubernetes.js/ApiClient', 'io.kubernetes.js/io.kubernetes.js.models/UnversionedAPIResourceList', 'io.kubernetes.js/io.kubernetes.js.models/UnversionedPatch', 'io.kubernetes.js/io.kubernetes.js.models/UnversionedStatus', 'io.kubernetes.js/io.kubernetes.js.models/V1DeleteOptions', 'io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet', 'io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../io.kubernetes.js.models/UnversionedAPIResourceList'), require('../io.kubernetes.js.models/UnversionedPatch'), require('../io.kubernetes.js.models/UnversionedStatus'), require('../io.kubernetes.js.models/V1DeleteOptions'), require('../io.kubernetes.js.models/V1beta1StatefulSet'), require('../io.kubernetes.js.models/V1beta1StatefulSetList'));
  } else {
    // Browser globals (root is window)
    if (!root.KubernetesJsClient) {
      root.KubernetesJsClient = {};
    }
    root.KubernetesJsClient.AppsV1beta1Api = factory(root.KubernetesJsClient.ApiClient, root.KubernetesJsClient.UnversionedAPIResourceList, root.KubernetesJsClient.UnversionedPatch, root.KubernetesJsClient.UnversionedStatus, root.KubernetesJsClient.V1DeleteOptions, root.KubernetesJsClient.V1beta1StatefulSet, root.KubernetesJsClient.V1beta1StatefulSetList);
  }
}(this, function(ApiClient, UnversionedAPIResourceList, UnversionedPatch, UnversionedStatus, V1DeleteOptions, V1beta1StatefulSet, V1beta1StatefulSetList) {
  'use strict';

  /**
   * AppsV1beta1 service.
   * @module io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api
   * @version 1.0-snapshot
   */

  /**
   * Constructs a new AppsV1beta1Api. 
   * @alias module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api
   * @class
   * @param {module:io.kubernetes.js/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:io.kubernetes.js/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~createNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~createNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.createNamespacedStatefulSet = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling createNamespacedStatefulSet");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createNamespacedStatefulSet");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollectionNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~deleteCollectionNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~deleteCollectionNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/UnversionedStatus}
     */
    this.deleteCollectionNamespacedStatefulSet = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteCollectionNamespacedStatefulSet");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~deleteNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/UnversionedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~deleteNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/UnversionedStatus}
     */
    this.deleteNamespacedStatefulSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling deleteNamespacedStatefulSet");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteNamespacedStatefulSet");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling deleteNamespacedStatefulSet");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedStatus;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAPIResources operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~getAPIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/UnversionedAPIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~getAPIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/UnversionedAPIResourceList}
     */
    this.getAPIResources = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = UnversionedAPIResourceList;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~listNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~listNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList}
     */
    this.listNamespacedStatefulSet = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling listNamespacedStatefulSet");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1StatefulSetList;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listStatefulSetForAllNamespaces operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~listStatefulSetForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind StatefulSet
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~listStatefulSetForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList}
     */
    this.listStatefulSetForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1StatefulSetList;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/statefulsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~patchNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~patchNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.patchNamespacedStatefulSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling patchNamespacedStatefulSet");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchNamespacedStatefulSet");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchNamespacedStatefulSet");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNamespacedStatefulSetStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~patchNamespacedStatefulSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/UnversionedPatch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~patchNamespacedStatefulSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.patchNamespacedStatefulSetStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling patchNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchNamespacedStatefulSetStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~readNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~readNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.readNamespacedStatefulSet = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling readNamespacedStatefulSet");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling readNamespacedStatefulSet");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readNamespacedStatefulSetStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~readNamespacedStatefulSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~readNamespacedStatefulSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.readNamespacedStatefulSetStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling readNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling readNamespacedStatefulSetStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~replaceNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~replaceNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.replaceNamespacedStatefulSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling replaceNamespacedStatefulSet");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceNamespacedStatefulSet");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling replaceNamespacedStatefulSet");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceNamespacedStatefulSetStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~replaceNamespacedStatefulSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/AppsV1beta1Api~replaceNamespacedStatefulSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.replaceNamespacedStatefulSetStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling replaceNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling replaceNamespacedStatefulSetStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
