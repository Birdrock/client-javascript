/**
 * Kubernetes
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Kubernetes);
  }
}(this, function(expect, Kubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Kubernetes.BatchvalphaApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BatchvalphaApi', function() {
    describe('createBatchV2alpha1NamespacedCronJob', function() {
      it('should call createBatchV2alpha1NamespacedCronJob successfully', function(done) {
        //uncomment below and update the code to test createBatchV2alpha1NamespacedCronJob
        //instance.createBatchV2alpha1NamespacedCronJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBatchV2alpha1NamespacedJob', function() {
      it('should call createBatchV2alpha1NamespacedJob successfully', function(done) {
        //uncomment below and update the code to test createBatchV2alpha1NamespacedJob
        //instance.createBatchV2alpha1NamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBatchV2alpha1NamespacedScheduledJob', function() {
      it('should call createBatchV2alpha1NamespacedScheduledJob successfully', function(done) {
        //uncomment below and update the code to test createBatchV2alpha1NamespacedScheduledJob
        //instance.createBatchV2alpha1NamespacedScheduledJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchV2alpha1CollectionNamespacedCronJob', function() {
      it('should call deleteBatchV2alpha1CollectionNamespacedCronJob successfully', function(done) {
        //uncomment below and update the code to test deleteBatchV2alpha1CollectionNamespacedCronJob
        //instance.deleteBatchV2alpha1CollectionNamespacedCronJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchV2alpha1CollectionNamespacedJob', function() {
      it('should call deleteBatchV2alpha1CollectionNamespacedJob successfully', function(done) {
        //uncomment below and update the code to test deleteBatchV2alpha1CollectionNamespacedJob
        //instance.deleteBatchV2alpha1CollectionNamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchV2alpha1CollectionNamespacedScheduledJob', function() {
      it('should call deleteBatchV2alpha1CollectionNamespacedScheduledJob successfully', function(done) {
        //uncomment below and update the code to test deleteBatchV2alpha1CollectionNamespacedScheduledJob
        //instance.deleteBatchV2alpha1CollectionNamespacedScheduledJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchV2alpha1NamespacedCronJob', function() {
      it('should call deleteBatchV2alpha1NamespacedCronJob successfully', function(done) {
        //uncomment below and update the code to test deleteBatchV2alpha1NamespacedCronJob
        //instance.deleteBatchV2alpha1NamespacedCronJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchV2alpha1NamespacedJob', function() {
      it('should call deleteBatchV2alpha1NamespacedJob successfully', function(done) {
        //uncomment below and update the code to test deleteBatchV2alpha1NamespacedJob
        //instance.deleteBatchV2alpha1NamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchV2alpha1NamespacedScheduledJob', function() {
      it('should call deleteBatchV2alpha1NamespacedScheduledJob successfully', function(done) {
        //uncomment below and update the code to test deleteBatchV2alpha1NamespacedScheduledJob
        //instance.deleteBatchV2alpha1NamespacedScheduledJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBatchV2alpha1APIResources', function() {
      it('should call getBatchV2alpha1APIResources successfully', function(done) {
        //uncomment below and update the code to test getBatchV2alpha1APIResources
        //instance.getBatchV2alpha1APIResources(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBatchV2alpha1CronJobForAllNamespaces', function() {
      it('should call listBatchV2alpha1CronJobForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listBatchV2alpha1CronJobForAllNamespaces
        //instance.listBatchV2alpha1CronJobForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBatchV2alpha1JobForAllNamespaces', function() {
      it('should call listBatchV2alpha1JobForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listBatchV2alpha1JobForAllNamespaces
        //instance.listBatchV2alpha1JobForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBatchV2alpha1NamespacedCronJob', function() {
      it('should call listBatchV2alpha1NamespacedCronJob successfully', function(done) {
        //uncomment below and update the code to test listBatchV2alpha1NamespacedCronJob
        //instance.listBatchV2alpha1NamespacedCronJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBatchV2alpha1NamespacedJob', function() {
      it('should call listBatchV2alpha1NamespacedJob successfully', function(done) {
        //uncomment below and update the code to test listBatchV2alpha1NamespacedJob
        //instance.listBatchV2alpha1NamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBatchV2alpha1NamespacedScheduledJob', function() {
      it('should call listBatchV2alpha1NamespacedScheduledJob successfully', function(done) {
        //uncomment below and update the code to test listBatchV2alpha1NamespacedScheduledJob
        //instance.listBatchV2alpha1NamespacedScheduledJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBatchV2alpha1ScheduledJobForAllNamespaces', function() {
      it('should call listBatchV2alpha1ScheduledJobForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listBatchV2alpha1ScheduledJobForAllNamespaces
        //instance.listBatchV2alpha1ScheduledJobForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchBatchV2alpha1NamespacedCronJob', function() {
      it('should call patchBatchV2alpha1NamespacedCronJob successfully', function(done) {
        //uncomment below and update the code to test patchBatchV2alpha1NamespacedCronJob
        //instance.patchBatchV2alpha1NamespacedCronJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchBatchV2alpha1NamespacedCronJobStatus', function() {
      it('should call patchBatchV2alpha1NamespacedCronJobStatus successfully', function(done) {
        //uncomment below and update the code to test patchBatchV2alpha1NamespacedCronJobStatus
        //instance.patchBatchV2alpha1NamespacedCronJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchBatchV2alpha1NamespacedJob', function() {
      it('should call patchBatchV2alpha1NamespacedJob successfully', function(done) {
        //uncomment below and update the code to test patchBatchV2alpha1NamespacedJob
        //instance.patchBatchV2alpha1NamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchBatchV2alpha1NamespacedJobStatus', function() {
      it('should call patchBatchV2alpha1NamespacedJobStatus successfully', function(done) {
        //uncomment below and update the code to test patchBatchV2alpha1NamespacedJobStatus
        //instance.patchBatchV2alpha1NamespacedJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchBatchV2alpha1NamespacedScheduledJob', function() {
      it('should call patchBatchV2alpha1NamespacedScheduledJob successfully', function(done) {
        //uncomment below and update the code to test patchBatchV2alpha1NamespacedScheduledJob
        //instance.patchBatchV2alpha1NamespacedScheduledJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchBatchV2alpha1NamespacedScheduledJobStatus', function() {
      it('should call patchBatchV2alpha1NamespacedScheduledJobStatus successfully', function(done) {
        //uncomment below and update the code to test patchBatchV2alpha1NamespacedScheduledJobStatus
        //instance.patchBatchV2alpha1NamespacedScheduledJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readBatchV2alpha1NamespacedCronJob', function() {
      it('should call readBatchV2alpha1NamespacedCronJob successfully', function(done) {
        //uncomment below and update the code to test readBatchV2alpha1NamespacedCronJob
        //instance.readBatchV2alpha1NamespacedCronJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readBatchV2alpha1NamespacedCronJobStatus', function() {
      it('should call readBatchV2alpha1NamespacedCronJobStatus successfully', function(done) {
        //uncomment below and update the code to test readBatchV2alpha1NamespacedCronJobStatus
        //instance.readBatchV2alpha1NamespacedCronJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readBatchV2alpha1NamespacedJob', function() {
      it('should call readBatchV2alpha1NamespacedJob successfully', function(done) {
        //uncomment below and update the code to test readBatchV2alpha1NamespacedJob
        //instance.readBatchV2alpha1NamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readBatchV2alpha1NamespacedJobStatus', function() {
      it('should call readBatchV2alpha1NamespacedJobStatus successfully', function(done) {
        //uncomment below and update the code to test readBatchV2alpha1NamespacedJobStatus
        //instance.readBatchV2alpha1NamespacedJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readBatchV2alpha1NamespacedScheduledJob', function() {
      it('should call readBatchV2alpha1NamespacedScheduledJob successfully', function(done) {
        //uncomment below and update the code to test readBatchV2alpha1NamespacedScheduledJob
        //instance.readBatchV2alpha1NamespacedScheduledJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readBatchV2alpha1NamespacedScheduledJobStatus', function() {
      it('should call readBatchV2alpha1NamespacedScheduledJobStatus successfully', function(done) {
        //uncomment below and update the code to test readBatchV2alpha1NamespacedScheduledJobStatus
        //instance.readBatchV2alpha1NamespacedScheduledJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceBatchV2alpha1NamespacedCronJob', function() {
      it('should call replaceBatchV2alpha1NamespacedCronJob successfully', function(done) {
        //uncomment below and update the code to test replaceBatchV2alpha1NamespacedCronJob
        //instance.replaceBatchV2alpha1NamespacedCronJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceBatchV2alpha1NamespacedCronJobStatus', function() {
      it('should call replaceBatchV2alpha1NamespacedCronJobStatus successfully', function(done) {
        //uncomment below and update the code to test replaceBatchV2alpha1NamespacedCronJobStatus
        //instance.replaceBatchV2alpha1NamespacedCronJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceBatchV2alpha1NamespacedJob', function() {
      it('should call replaceBatchV2alpha1NamespacedJob successfully', function(done) {
        //uncomment below and update the code to test replaceBatchV2alpha1NamespacedJob
        //instance.replaceBatchV2alpha1NamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceBatchV2alpha1NamespacedJobStatus', function() {
      it('should call replaceBatchV2alpha1NamespacedJobStatus successfully', function(done) {
        //uncomment below and update the code to test replaceBatchV2alpha1NamespacedJobStatus
        //instance.replaceBatchV2alpha1NamespacedJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceBatchV2alpha1NamespacedScheduledJob', function() {
      it('should call replaceBatchV2alpha1NamespacedScheduledJob successfully', function(done) {
        //uncomment below and update the code to test replaceBatchV2alpha1NamespacedScheduledJob
        //instance.replaceBatchV2alpha1NamespacedScheduledJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceBatchV2alpha1NamespacedScheduledJobStatus', function() {
      it('should call replaceBatchV2alpha1NamespacedScheduledJobStatus successfully', function(done) {
        //uncomment below and update the code to test replaceBatchV2alpha1NamespacedScheduledJobStatus
        //instance.replaceBatchV2alpha1NamespacedScheduledJobStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1CronJobListForAllNamespaces', function() {
      it('should call watchBatchV2alpha1CronJobListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1CronJobListForAllNamespaces
        //instance.watchBatchV2alpha1CronJobListForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1JobListForAllNamespaces', function() {
      it('should call watchBatchV2alpha1JobListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1JobListForAllNamespaces
        //instance.watchBatchV2alpha1JobListForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1NamespacedCronJob', function() {
      it('should call watchBatchV2alpha1NamespacedCronJob successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1NamespacedCronJob
        //instance.watchBatchV2alpha1NamespacedCronJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1NamespacedCronJobList', function() {
      it('should call watchBatchV2alpha1NamespacedCronJobList successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1NamespacedCronJobList
        //instance.watchBatchV2alpha1NamespacedCronJobList(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1NamespacedJob', function() {
      it('should call watchBatchV2alpha1NamespacedJob successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1NamespacedJob
        //instance.watchBatchV2alpha1NamespacedJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1NamespacedJobList', function() {
      it('should call watchBatchV2alpha1NamespacedJobList successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1NamespacedJobList
        //instance.watchBatchV2alpha1NamespacedJobList(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1NamespacedScheduledJob', function() {
      it('should call watchBatchV2alpha1NamespacedScheduledJob successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1NamespacedScheduledJob
        //instance.watchBatchV2alpha1NamespacedScheduledJob(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1NamespacedScheduledJobList', function() {
      it('should call watchBatchV2alpha1NamespacedScheduledJobList successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1NamespacedScheduledJobList
        //instance.watchBatchV2alpha1NamespacedScheduledJobList(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBatchV2alpha1ScheduledJobListForAllNamespaces', function() {
      it('should call watchBatchV2alpha1ScheduledJobListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchBatchV2alpha1ScheduledJobListForAllNamespaces
        //instance.watchBatchV2alpha1ScheduledJobListForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
